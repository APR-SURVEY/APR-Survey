['D4j_id: Lang-30', 'CodRep_id: Dataset3-86', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-86', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Compress-5', 'CodRep_id: Dataset3-562', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Math-100', 'CodRep_id: Dataset3-763', 'D4j_bug: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {', 'D4j_fix: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getUnboundParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {']
['D4j_id: Math-104', 'CodRep_id: Dataset3-876', 'D4j_bug: private static final long serialVersionUID = -6587513359895466954L; /** Maximum allowed numerical error. */ private static final double DEFAULT_EPSILON = 10e-9; /** Lanczos coefficients */ private static double[] lanczos =', 'D4j_fix: private static final long serialVersionUID = -6587513359895466954L; /** Maximum allowed numerical error. */ private static final double DEFAULT_EPSILON = 10e-15; /** Lanczos coefficients */ private static double[] lanczos =']
['D4j_id: Lang-54', 'CodRep_id: Dataset3-1066', 'D4j_bug: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);', 'D4j_fix: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); if (ch3 == \'_\') { return new Locale(str.substring(0, 2), "", str.substring(4)); } char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-1066', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-1084', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-8', 'CodRep_id: Dataset3-1084', 'D4j_bug: return eof ? -1 : 0; } void setInitialBuffer(byte[] out, int outPos, int outAvail) { if (out != null && out.length == outAvail) { buffer = out; pos = outPos; readPos = outPos; } } /** * <p> * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with', 'D4j_fix: return eof ? -1 : 0; } /** * <p> * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with']
['D4j_id: Math-10', 'CodRep_id: Dataset3-1128', 'D4j_bug: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly }', 'D4j_fix: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]); }']
['D4j_id: Compress-25', 'CodRep_id: Dataset3-1248', "D4j_bug: this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor; // haven't read anything so far } public ZipArchiveEntry getNextZipEntry() throws IOException {", "D4j_fix: this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor; // haven't read anything so far buf.limit(0); } public ZipArchiveEntry getNextZipEntry() throws IOException {"]
['D4j_id: Codec-3', 'CodRep_id: Dataset3-1279', 'D4j_bug: if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) { //-- obvious germanic --// result.append(\'K\'); } else if (contains(value, index + 1, 4, "IER")) { result.append(\'J\'); } else { result.append(\'J\', \'K\');', 'D4j_fix: if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) { //-- obvious germanic --// result.append(\'K\'); } else if (contains(value, index + 1, 3, "IER")) { result.append(\'J\'); } else { result.append(\'J\', \'K\');']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-1293', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-1293', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Lang-40', 'CodRep_id: Dataset3-1293', 'D4j_bug: if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); } // IndexOfAny chars', 'D4j_fix: if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; } // IndexOfAny chars']
['D4j_id: Math-33', 'CodRep_id: Dataset3-1340', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-42', 'CodRep_id: Dataset3-1340', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Lang-53', 'CodRep_id: Dataset3-1696', 'D4j_bug: int millisecs = val.get(Calendar.MILLISECOND); if (!round || millisecs < 500) { time = time - millisecs; if (field == Calendar.SECOND) { done = true; } } // truncate seconds int seconds = val.get(Calendar.SECOND); if (!done && (!round || seconds < 30)) { time = time - (seconds * 1000L); if (field == Calendar.MINUTE) { done = true; } } // truncate minutes', 'D4j_fix: int millisecs = val.get(Calendar.MILLISECOND); if (!round || millisecs < 500) { time = time - millisecs; } if (field == Calendar.SECOND) { done = true; } // truncate seconds int seconds = val.get(Calendar.SECOND); if (!done && (!round || seconds < 30)) { time = time - (seconds * 1000L); } if (field == Calendar.MINUTE) { done = true; } // truncate minutes']
['D4j_id: Lang-65', 'CodRep_id: Dataset3-1696', 'D4j_bug: throw new ArithmeticException("Calendar value too large for accurate calculations"); } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59', 'D4j_fix: throw new ArithmeticException("Calendar value too large for accurate calculations"); } if (field == Calendar.MILLISECOND) { return; } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-1697', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-1697', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Math-33', 'CodRep_id: Dataset3-1737', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-42', 'CodRep_id: Dataset3-1737', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-1747', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-1747', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Lang-54', 'CodRep_id: Dataset3-1816', 'D4j_bug: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);', 'D4j_fix: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); if (ch3 == \'_\') { return new Locale(str.substring(0, 2), "", str.substring(4)); } char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-1816', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-14', 'CodRep_id: Dataset3-1856', 'D4j_bug: if (cs1 == null || cs2 == null) { return false; } return cs1.equals(cs2); } /**', 'D4j_fix: if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); } /**']
['D4j_id: Lang-20', 'CodRep_id: Dataset3-1856', 'D4j_bug: return EMPTY; } StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {', 'D4j_fix: return EMPTY; } StringBuilder buf = new StringBuilder(noOfItems * 16); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-1856', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-1856', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-1917', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-17', 'CodRep_id: Dataset3-1917', "D4j_bug: } // May have additional NULs or spaces trailer = buffer[end - 1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) {", "D4j_fix: } // May have additional NULs or spaces trailer = buffer[end - 1]; while (start < end - 1 && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) {"]
['D4j_id: Compress-27', 'CodRep_id: Dataset3-1917', 'D4j_bug: end--; trailer = buffer[end - 1]; } if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start];', 'D4j_fix: end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-1917', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Lang-14', 'CodRep_id: Dataset3-1934', 'D4j_bug: if (cs1 == null || cs2 == null) { return false; } return cs1.equals(cs2); } /**', 'D4j_fix: if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); } /**']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-1934', 'D4j_bug: char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { // missing low surrogate, fine, like String.indexOf(String) if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else {', 'D4j_fix: char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (Character.isHighSurrogate(ch)) { if (j == searchLast) { // missing low surrogate, fine, like String.indexOf(String) return true; } if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else {']
['D4j_id: Math-81', 'CodRep_id: Dataset3-1990', 'D4j_bug: lowerSpectra = Math.min(lowerSpectra, lower); final double upper = dCurrent + eCurrent; work[upperStart + m - 1] = upper; minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax); }', 'D4j_fix: lowerSpectra = Math.min(lowerSpectra, lower); final double upper = dCurrent + eCurrent; work[upperStart + m - 1] = upper; upperSpectra = Math.max(upperSpectra, upper); minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax); }']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-2088', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-2088', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Math-72', 'CodRep_id: Dataset3-2250', 'D4j_bug: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }', 'D4j_fix: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); return result; }']
['D4j_id: Math-64', 'CodRep_id: Dataset3-2264', 'D4j_bug: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); current = new VectorialPointValuePair(point, objective); // compute the scaled actual reduction double actRed = -1.0;', 'D4j_fix: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); // compute the scaled actual reduction double actRed = -1.0;']
['D4j_id: Math-91', 'CodRep_id: Dataset3-2271', 'D4j_bug: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }', 'D4j_fix: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator; long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }']
['D4j_id: Math-106', 'CodRep_id: Dataset3-2275', "D4j_bug: return null; } // minus signs should be leading, invalid expression // parse '/' int startIndex = pos.getIndex();", "D4j_fix: return null; } if (num.intValue() < 0) { // minus signs should be leading, invalid expression pos.setIndex(initialIndex); return null; } // parse '/' int startIndex = pos.getIndex();"]
['D4j_id: Math-77', 'CodRep_id: Dataset3-2287', 'D4j_bug: public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; }', 'D4j_fix: public double getLInfNorm() { double max = 0; for (double a : data) { max = Math.max(max, Math.abs(a)); } return max; }']
['D4j_id: Math-98', 'CodRep_id: Dataset3-2288', 'D4j_bug: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {', 'D4j_fix: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {']
['D4j_id: Math-86', 'CodRep_id: Dataset3-2291', 'D4j_bug: final double[] lI = lTData[i]; if (lTData[i][i] < absolutePositivityThreshold) { throw new NotPositiveDefiniteMatrixException(); } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];', 'D4j_fix: final double[] lI = lTData[i]; // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];']
['D4j_id: Math-77', 'CodRep_id: Dataset3-2299', 'D4j_bug: return max; } public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from', 'D4j_fix: return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from']
['D4j_id: Math-75', 'CodRep_id: Dataset3-2308', 'D4j_bug: */ @Deprecated public double getPct(Object v) { return getCumPct((Comparable<?>) v); } /**', 'D4j_fix: */ @Deprecated public double getPct(Object v) { return getPct((Comparable<?>) v); } /**']
['D4j_id: Math-105', 'CodRep_id: Dataset3-2312', 'D4j_bug: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return sumYY - sumXY * sumXY / sumXX; } /**', 'D4j_fix: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return Math.max(0d, sumYY - sumXY * sumXY / sumXX); } /**']
['D4j_id: Math-66', 'CodRep_id: Dataset3-2616', 'D4j_bug: u = x + d; } double fu = computeObjectiveValue(f, u); if (goalType == GoalType.MAXIMIZE) { fu = -fu; }', 'D4j_fix: u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; }']
['D4j_id: Math-61', 'CodRep_id: Dataset3-2620', 'D4j_bug: */ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) { if (p <= 0) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p); } mean = p; normal = new NormalDistributionImpl(p, FastMath.sqrt(p));', 'D4j_fix: */ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) { if (p <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p); } mean = p; normal = new NormalDistributionImpl(p, FastMath.sqrt(p));']
['D4j_id: Lang-59', 'CodRep_id: Dataset3-2932', 'D4j_bug: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);', 'D4j_fix: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-2932', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-2932', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Lang-52', 'CodRep_id: Dataset3-2989', "D4j_bug: out.write('\\\\'); out.write('\\\\'); break; default : out.write(ch); break;", "D4j_fix: out.write('\\\\'); out.write('\\\\'); break; case '/': out.write('\\\\'); out.write('/'); break; default : out.write(ch); break;"]
['D4j_id: Math-6', 'CodRep_id: Dataset3-3002', 'D4j_bug: this.checker = checker; evaluations = new Incrementor(0, new MaxEvalCallback()); iterations = new Incrementor(0, new MaxIterCallback()); } /**', 'D4j_fix: this.checker = checker; evaluations = new Incrementor(0, new MaxEvalCallback()); iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback()); } /**']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-3140', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-5', 'CodRep_id: Dataset3-3140', "D4j_bug: // EOF (-1) and first time '=' character is encountered in stream. // This approach makes the '=' padding characters completely optional. if (eof && modulus != 0) { x = x << 6; switch (modulus) {", "D4j_fix: // EOF (-1) and first time '=' character is encountered in stream. // This approach makes the '=' padding characters completely optional. if (eof && modulus != 0) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } x = x << 6; switch (modulus) {"]
['D4j_id: Csv-8', 'CodRep_id: Dataset3-3172', 'D4j_bug: if (header == null) { this.header = null; } else { this.header = header.clone(); } this.skipHeaderRecord = skipHeaderRecord;', 'D4j_fix: if (header == null) { this.header = null; } else { Set<String> dupCheck = new HashSet<String>(); for(String hdr : header) { if (!dupCheck.add(hdr)) { throw new IllegalArgumentException("The header contains a duplicate entry: \'" + hdr + "\' in " + Arrays.toString(header)); } } this.header = header.clone(); } this.skipHeaderRecord = skipHeaderRecord;']
['D4j_id: Math-59', 'CodRep_id: Dataset3-3200', 'D4j_bug: * @return b if a is lesser or equal to b, a otherwise */ public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b); } /** Compute the maximum of two values', 'D4j_fix: * @return b if a is lesser or equal to b, a otherwise */ public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a); } /** Compute the maximum of two values']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-3379', 'D4j_bug: if (!containsKey(key)) { keysAsListed.add(key); } put(key, value); } /**', 'D4j_fix: if (!containsKey(key)) { keysAsListed.add(key); } super.put(key, value); } /**']
['D4j_id: Csv-4', 'CodRep_id: Dataset3-3398', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Lang-14', 'CodRep_id: Dataset3-3408', 'D4j_bug: if (cs1 == null || cs2 == null) { return false; } return cs1.equals(cs2); } /**', 'D4j_fix: if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); } /**']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-3408', 'D4j_bug: char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { // missing low surrogate, fine, like String.indexOf(String) if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else {', 'D4j_fix: char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (Character.isHighSurrogate(ch)) { if (j == searchLast) { // missing low surrogate, fine, like String.indexOf(String) return true; } if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else {']
['D4j_id: Math-77', 'CodRep_id: Dataset3-3732', 'D4j_bug: return max; } public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from', 'D4j_fix: return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-3927', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-3927', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Compress-5', 'CodRep_id: Dataset3-4090', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Lang-31', 'CodRep_id: Dataset3-4339', 'D4j_bug: } int csLength = cs.length(); int searchLength = searchChars.length; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { // ch is a supplementary character // ch is in the Basic Multilingual Plane return true; } } }', 'D4j_fix: } int csLength = cs.length(); int searchLength = searchChars.length; int csLastIndex = csLength - 1; int searchLastIndex = searchLength - 1; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else { // ch is in the Basic Multilingual Plane return true; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-4339', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Lang-40', 'CodRep_id: Dataset3-4339', 'D4j_bug: if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); } // IndexOfAny chars', 'D4j_fix: if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; } // IndexOfAny chars']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-4390', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-4432', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-4433', 'D4j_bug: } // single character is itself if (txt.length() == 1) { return txt.toUpperCase() ; } char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;', 'D4j_fix: } // single character is itself if (txt.length() == 1) { return txt.toUpperCase(java.util.Locale.ENGLISH) ; } char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;']
['D4j_id: Math-64', 'CodRep_id: Dataset3-4724', 'D4j_bug: (delta <= parRelativeTolerance * xNorm)) { return current; } } else { if (checker.converged(getIterations(), previous, current)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)', 'D4j_fix: (delta <= parRelativeTolerance * xNorm)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)']
['D4j_id: Math-68', 'CodRep_id: Dataset3-4724', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Math-72', 'CodRep_id: Dataset3-4816', 'D4j_bug: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }', 'D4j_fix: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); return result; }']
['D4j_id: Math-103', 'CodRep_id: Dataset3-4835', 'D4j_bug: * convergence exception is caught and 0 or 1 is returned. */ public double cumulativeProbability(double x) throws MathException { return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)))); } /**', 'D4j_fix: * convergence exception is caught and 0 or 1 is returned. */ public double cumulativeProbability(double x) throws MathException { try { return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0.0d; } else if (x > (mean + 20 * standardDeviation)) { return 1.0d; } else { throw ex; } } } /**']
['D4j_id: Math-64', 'CodRep_id: Dataset3-4843', 'D4j_bug: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); current = new VectorialPointValuePair(point, objective); // compute the scaled actual reduction double actRed = -1.0;', 'D4j_fix: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); // compute the scaled actual reduction double actRed = -1.0;']
['D4j_id: Math-91', 'CodRep_id: Dataset3-4850', 'D4j_bug: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }', 'D4j_fix: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator; long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }']
['D4j_id: Math-106', 'CodRep_id: Dataset3-4854', "D4j_bug: return null; } // minus signs should be leading, invalid expression // parse '/' int startIndex = pos.getIndex();", "D4j_fix: return null; } if (num.intValue() < 0) { // minus signs should be leading, invalid expression pos.setIndex(initialIndex); return null; } // parse '/' int startIndex = pos.getIndex();"]
['D4j_id: Math-77', 'CodRep_id: Dataset3-4868', 'D4j_bug: public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; }', 'D4j_fix: public double getLInfNorm() { double max = 0; for (double a : data) { max = Math.max(max, Math.abs(a)); } return max; }']
['D4j_id: Math-98', 'CodRep_id: Dataset3-4869', 'D4j_bug: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {', 'D4j_fix: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {']
['D4j_id: Math-86', 'CodRep_id: Dataset3-4872', 'D4j_bug: final double[] lI = lTData[i]; if (lTData[i][i] < absolutePositivityThreshold) { throw new NotPositiveDefiniteMatrixException(); } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];', 'D4j_fix: final double[] lI = lTData[i]; // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];']
['D4j_id: Math-77', 'CodRep_id: Dataset3-4881', 'D4j_bug: return max; } public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from', 'D4j_fix: return max; } /** * Optimized method to compute LInfDistance. * @param v The vector to compute from']
['D4j_id: Math-67', 'CodRep_id: Dataset3-4899', 'D4j_bug: /** {@inheritDoc} */ public double getFunctionValue() { return optimizer.getFunctionValue(); } /** {@inheritDoc} */ public double getResult() { return optimizer.getResult(); } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public double getFunctionValue() { return optimaValues[0]; } /** {@inheritDoc} */ public double getResult() { return optima[0]; } /** {@inheritDoc} */']
['D4j_id: Math-65', 'CodRep_id: Dataset3-4907', 'D4j_bug: * @return RMS value */ public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } /**', 'D4j_fix: * @return RMS value */ public double getRMS() { return Math.sqrt(getChiSquare() / rows); } /**']
['D4j_id: Math-64', 'CodRep_id: Dataset3-4909', 'D4j_bug: (delta <= parRelativeTolerance * xNorm)) { return current; } } else { if (checker.converged(getIterations(), previous, current)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)', 'D4j_fix: (delta <= parRelativeTolerance * xNorm)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)']
['D4j_id: Math-68', 'CodRep_id: Dataset3-4909', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Math-75', 'CodRep_id: Dataset3-4916', 'D4j_bug: */ @Deprecated public double getPct(Object v) { return getCumPct((Comparable<?>) v); } /**', 'D4j_fix: */ @Deprecated public double getPct(Object v) { return getPct((Comparable<?>) v); } /**']
['D4j_id: Math-69', 'CodRep_id: Dataset3-4919', 'D4j_bug: } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } }', 'D4j_fix: } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * tDistribution.cumulativeProbability(-t); } } }']
['D4j_id: Math-105', 'CodRep_id: Dataset3-4935', 'D4j_bug: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return sumYY - sumXY * sumXY / sumXX; } /**', 'D4j_fix: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return Math.max(0d, sumYY - sumXY * sumXY / sumXX); } /**']
['D4j_id: Csv-8', 'CodRep_id: Dataset3-4956', 'D4j_bug: throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } /**', 'D4j_fix: throw new IllegalStateException("No quotes mode set but no escape character is set"); } } /**']
['D4j_id: Lang-9', 'CodRep_id: Dataset3-4984', 'D4j_bug: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }', 'D4j_fix: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if (patternMatcher.regionStart() != patternMatcher.regionEnd()) { throw new IllegalArgumentException("Failed to parse \\""+pattern+"\\" ; gave up at index "+patternMatcher.regionStart()); } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }']
['D4j_id: Math-86', 'CodRep_id: Dataset3-4998', 'D4j_bug: final double[] lI = lTData[i]; if (lTData[i][i] < absolutePositivityThreshold) { throw new NotPositiveDefiniteMatrixException(); } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];', 'D4j_fix: final double[] lI = lTData[i]; // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-5156', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-17', 'CodRep_id: Dataset3-5156', "D4j_bug: } // May have additional NULs or spaces trailer = buffer[end - 1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) {", "D4j_fix: } // May have additional NULs or spaces trailer = buffer[end - 1]; while (start < end - 1 && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) {"]
['D4j_id: Compress-27', 'CodRep_id: Dataset3-5156', 'D4j_bug: end--; trailer = buffer[end - 1]; } if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start];', 'D4j_fix: end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-5156', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Compress-4', 'CodRep_id: Dataset3-5158', 'D4j_bug: results.addedFromChangeSet(change.getEntry().getName()); } } return results; }', 'D4j_fix: results.addedFromChangeSet(change.getEntry().getName()); } } out.finish(); return results; }']
['D4j_id: Lang-41', 'CodRep_id: Dataset3-5222', 'D4j_bug: if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } return out; } // Package name', 'D4j_fix: if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } return out + arrayPrefix; } // Package name']
['D4j_id: Lang-54', 'CodRep_id: Dataset3-5224', 'D4j_bug: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);', 'D4j_fix: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); if (ch3 == \'_\') { return new Locale(str.substring(0, 2), "", str.substring(4)); } char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-5224', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-40', 'CodRep_id: Dataset3-5230', 'D4j_bug: if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); } // IndexOfAny chars', 'D4j_fix: if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; } // IndexOfAny chars']
['D4j_id: Lang-45', 'CodRep_id: Dataset3-5233', 'D4j_bug: // if the lower value is greater than the length of the string, // set to the length of the string // if the upper value is -1 (i.e. no limit) or is greater // than the length of the string, set to the length of the string if (upper == -1 || upper > str.length()) {', 'D4j_fix: // if the lower value is greater than the length of the string, // set to the length of the string if (lower > str.length()) { lower = str.length(); } // if the upper value is -1 (i.e. no limit) or is greater // than the length of the string, set to the length of the string if (upper == -1 || upper > str.length()) {']
['D4j_id: Lang-49', 'CodRep_id: Dataset3-5248', 'D4j_bug: * @return a new reduced fraction instance, or this if no simplification possible */ public Fraction reduce() { int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this;', 'D4j_fix: * @return a new reduced fraction instance, or this if no simplification possible */ public Fraction reduce() { if (numerator == 0) { return equals(ZERO) ? this : ZERO; } int gcd = greatestCommonDivisor(Math.abs(numerator), denominator); if (gcd == 1) { return this;']
['D4j_id: Lang-65', 'CodRep_id: Dataset3-5273', 'D4j_bug: throw new ArithmeticException("Calendar value too large for accurate calculations"); } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59', 'D4j_fix: throw new ArithmeticException("Calendar value too large for accurate calculations"); } if (field == Calendar.MILLISECOND) { return; } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59']
['D4j_id: Csv-8', 'CodRep_id: Dataset3-5350', 'D4j_bug: throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } /**', 'D4j_fix: throw new IllegalStateException("No quotes mode set but no escape character is set"); } } /**']
['D4j_id: Math-22', 'CodRep_id: Dataset3-5359', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return true; } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return false; } /** {@inheritDoc} */']
['D4j_id: Compress-9', 'CodRep_id: Dataset3-5616', 'D4j_bug: numToWrite -= num; wOffset += num; } count(numToWrite); } /**', 'D4j_fix: numToWrite -= num; wOffset += num; } } /**']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-5651', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-6', 'CodRep_id: Dataset3-5654', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-5656', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-5656', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-5657', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-5657', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Csv-8', 'CodRep_id: Dataset3-5687', 'D4j_bug: throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } /**', 'D4j_fix: throw new IllegalStateException("No quotes mode set but no escape character is set"); } } /**']
['D4j_id: Collections-20', 'CodRep_id: Dataset3-5805', 'D4j_bug: if (currentIndex == -1) { throw new IllegalStateException(); } if (nextIndex == currentIndex) { next = next.next(); parent.remove(currentIndex); } else { // remove() following next() parent.remove(currentIndex); nextIndex--; } // the AVL node referenced by next may have become stale after a remove // reset it now: will be retrieved by next call to next()/previous() via nextIndex current = null; currentIndex = -1; expectedModCount++;', 'D4j_fix: if (currentIndex == -1) { throw new IllegalStateException(); } parent.remove(currentIndex); if (nextIndex != currentIndex) { // remove() following next() nextIndex--; } // the AVL node referenced by next may have become stale after a remove // reset it now: will be retrieved by next call to next()/previous() via nextIndex next = null; current = null; currentIndex = -1; expectedModCount++;']
['D4j_id: Collections-2', 'CodRep_id: Dataset3-5875', 'D4j_bug: * This is the name of the property that can point to other * properties file for including other properties files. */ /** * This is the default name of the property that can point to other', 'D4j_fix: * This is the name of the property that can point to other * properties file for including other properties files. */ private String includePropertyName = null; /** * This is the default name of the property that can point to other']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-5875', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Math-22', 'CodRep_id: Dataset3-6110', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return true; } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return false; } /** {@inheritDoc} */']
['D4j_id: Compress-21', 'CodRep_id: Dataset3-6113', 'D4j_bug: int shift = 7; for (int i = 0; i < length; i++) { cache |= ((bits.get(i) ? 1 : 0) << shift); --shift; if (shift == 0) { header.write(cache); shift = 7; cache = 0; } } if (length > 0 && shift > 0) { header.write(cache); } }', 'D4j_fix: int shift = 7; for (int i = 0; i < length; i++) { cache |= ((bits.get(i) ? 1 : 0) << shift); if (--shift < 0) { header.write(cache); shift = 7; cache = 0; } } if (shift != 7) { header.write(cache); } }']
['D4j_id: Lang-13', 'CodRep_id: Dataset3-6179', 'D4j_bug: * class here is a workaround, see the JIRA issue LANG-626. </p> */ static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { private ClassLoader classLoader; /**', 'D4j_fix: * class here is a workaround, see the JIRA issue LANG-626. </p> */ static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { private static final Map<String, Class<?>> primitiveTypes = new HashMap<String, Class<?>>(); private ClassLoader classLoader; /**']
['D4j_id: Lang-33', 'CodRep_id: Dataset3-6361', 'D4j_bug: } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i].getClass(); } return classes; }', 'D4j_fix: } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i] == null ? null : array[i].getClass(); } return classes; }']
['D4j_id: Lang-41', 'CodRep_id: Dataset3-6361', 'D4j_bug: * @return the package name or an empty string */ public static String getPackageName(String className) { if (className == null) { return StringUtils.EMPTY; } // Strip array encoding // Strip Object type encoding int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {', "D4j_fix: * @return the package name or an empty string */ public static String getPackageName(String className) { if (className == null || className.length() == 0) { return StringUtils.EMPTY; } // Strip array encoding while (className.charAt(0) == '[') { className = className.substring(1); } // Strip Object type encoding if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { className = className.substring(1); } int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {"]
['D4j_id: Math-71', 'CodRep_id: Dataset3-6369', 'D4j_bug: // it is so small (much probably exactly 0 due to limited accuracy) // that the code above would fail handling it. // So we set up an artificial 0 size step by copying states loop = false; } else { // reject the step to match exactly the next switch time', 'D4j_fix: // it is so small (much probably exactly 0 due to limited accuracy) // that the code above would fail handling it. // So we set up an artificial 0 size step by copying states interpolator.storeTime(stepStart); System.arraycopy(y, 0, yTmp, 0, y0.length); hNew = 0; stepSize = 0; loop = false; } else { // reject the step to match exactly the next switch time']
['D4j_id: Math-74', 'CodRep_id: Dataset3-6369', 'D4j_bug: } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);', 'D4j_fix: } if (firstTime) { final double[] scale = new double[y0.length]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]); } } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);']
['D4j_id: Compress-5', 'CodRep_id: Dataset3-6388', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Lang-31', 'CodRep_id: Dataset3-6760', 'D4j_bug: } int csLength = cs.length(); int searchLength = searchChars.length; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { // ch is a supplementary character // ch is in the Basic Multilingual Plane return true; } } }', 'D4j_fix: } int csLength = cs.length(); int searchLength = searchChars.length; int csLastIndex = csLength - 1; int searchLastIndex = searchLength - 1; for (int i = 0; i < csLength; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLength; j++) { if (searchChars[j] == ch) { if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return true; } } else { // ch is in the Basic Multilingual Plane return true; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-6760', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Lang-40', 'CodRep_id: Dataset3-6760', 'D4j_bug: if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); } // IndexOfAny chars', 'D4j_fix: if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; } // IndexOfAny chars']
['D4j_id: Math-86', 'CodRep_id: Dataset3-6852', 'D4j_bug: final double[] lI = lTData[i]; if (lTData[i][i] < absolutePositivityThreshold) { throw new NotPositiveDefiniteMatrixException(); } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];', 'D4j_fix: final double[] lI = lTData[i]; // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];']
['D4j_id: Lang-35', 'CodRep_id: Dataset3-6879', 'D4j_bug: } else if (element != null) { type = element.getClass(); } else { type = Object.class; } @SuppressWarnings("unchecked") // type must be T T[] newArray = (T[]) copyArrayGrow1(array, type);', 'D4j_fix: } else if (element != null) { type = element.getClass(); } else { throw new IllegalArgumentException("Arguments cannot both be null"); } @SuppressWarnings("unchecked") // type must be T T[] newArray = (T[]) copyArrayGrow1(array, type);']
['D4j_id: Math-55', 'CodRep_id: Dataset3-6960', 'D4j_bug: */ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) { // rescale both vectors without losing precision, // to ensure their norm are the same order of magnitude // we reduce cancellation errors by preconditioning, // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute', 'D4j_fix: */ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) { final double n1 = v1.getNormSq(); final double n2 = v2.getNormSq(); if ((n1 * n2) < MathUtils.SAFE_MIN) { return ZERO; } // rescale both vectors without losing precision, // to ensure their norm are the same order of magnitude final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4; final double x1 = FastMath.scalb(v1.x, -deltaExp); final double y1 = FastMath.scalb(v1.y, -deltaExp); final double z1 = FastMath.scalb(v1.z, -deltaExp); final double x2 = FastMath.scalb(v2.x, deltaExp); final double y2 = FastMath.scalb(v2.y, deltaExp); final double z2 = FastMath.scalb(v2.z, deltaExp); // we reduce cancellation errors by preconditioning, // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute']
['D4j_id: Lang-56', 'CodRep_id: Dataset3-7036', 'D4j_bug: /** * The parsed rules. */ private Rule[] mRules; /** * The estimated maximum length. */ private int mMaxLengthEstimate; //----------------------------------------------------------------------- /**', 'D4j_fix: /** * The parsed rules. */ private transient Rule[] mRules; /** * The estimated maximum length. */ private transient int mMaxLengthEstimate; //----------------------------------------------------------------------- /**']
['D4j_id: Lang-1', 'CodRep_id: Dataset3-7135', 'D4j_bug: } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str);', "D4j_fix: } } if (pfxLen > 0) { // we have a hex number char firstSigDigit = 0; // strip leading zeroes for(int i = pfxLen; i < str.length(); i++) { firstSigDigit = str.charAt(i); if (firstSigDigit == '0') { // count leading zeroes pfxLen++; } else { break; } } final int hexDigits = str.length() - pfxLen; if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long return createBigInteger(str); } if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int return createLong(str); } return createInteger(str);"]
['D4j_id: Lang-3', 'CodRep_id: Dataset3-7135', 'D4j_bug: //Must be a Float, Double, BigDecimal final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number }', 'D4j_fix: //Must be a Float, Double, BigDecimal final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number } try { if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number }']
['D4j_id: Lang-7', 'CodRep_id: Dataset3-7135', 'D4j_bug: if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } // this is protection for poorness in java.lang.BigDecimal. // it accepts this as a legal value, but it does not appear // to be in specification of class. OS X Java parses it to // a wrong value. return new BigDecimal(str); }', 'D4j_fix: if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.trim().startsWith("--")) { // this is protection for poorness in java.lang.BigDecimal. // it accepts this as a legal value, but it does not appear // to be in specification of class. OS X Java parses it to // a wrong value. throw new NumberFormatException(str + " is not a valid number."); } return new BigDecimal(str); }']
['D4j_id: Lang-24', 'CodRep_id: Dataset3-7135', "D4j_bug: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp; } // last character is illegal return false;", "D4j_fix: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;"]
['D4j_id: Lang-36', 'CodRep_id: Dataset3-7135', 'D4j_bug: } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {', "D4j_fix: } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {"]
['D4j_id: Compress-9', 'CodRep_id: Dataset3-7264', 'D4j_bug: numToWrite -= num; wOffset += num; } count(numToWrite); } /**', 'D4j_fix: numToWrite -= num; wOffset += num; } } /**']
['D4j_id: Math-101', 'CodRep_id: Dataset3-7274', 'D4j_bug: int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { // set index back to initial, error index should be the start index', 'D4j_fix: int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ((startIndex >= source.length()) || (endIndex > source.length()) || source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { // set index back to initial, error index should be the start index']
['D4j_id: Lang-38', 'CodRep_id: Dataset3-7460', 'D4j_bug: */ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }', 'D4j_fix: */ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar.getTime(); /// LANG-538 calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }']
['D4j_id: Lang-56', 'CodRep_id: Dataset3-7460', 'D4j_bug: /** * The parsed rules. */ private Rule[] mRules; /** * The estimated maximum length. */ private int mMaxLengthEstimate; //----------------------------------------------------------------------- /**', 'D4j_fix: /** * The parsed rules. */ private transient Rule[] mRules; /** * The estimated maximum length. */ private transient int mMaxLengthEstimate; //----------------------------------------------------------------------- /**']
['D4j_id: Math-91', 'CodRep_id: Dataset3-7472', 'D4j_bug: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }', 'D4j_fix: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator; long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }']
['D4j_id: Math-13', 'CodRep_id: Dataset3-7490', 'D4j_bug: * @return the square-root of the weight matrix. */ private RealMatrix squareRoot(RealMatrix m) { final EigenDecomposition dec = new EigenDecomposition(m); return dec.getSquareRoot(); } }', 'D4j_fix: * @return the square-root of the weight matrix. */ private RealMatrix squareRoot(RealMatrix m) { if (m instanceof DiagonalMatrix) { final int dim = m.getRowDimension(); final RealMatrix sqrtM = new DiagonalMatrix(dim); for (int i = 0; i < dim; i++) { sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i))); } return sqrtM; } else { final EigenDecomposition dec = new EigenDecomposition(m); return dec.getSquareRoot(); } } }']
['D4j_id: Math-14', 'CodRep_id: Dataset3-7490', 'D4j_bug: * @return the square-root of the weight matrix. */ private RealMatrix squareRoot(RealMatrix m) { final EigenDecomposition dec = new EigenDecomposition(m); return dec.getSquareRoot(); } }', 'D4j_fix: * @return the square-root of the weight matrix. */ private RealMatrix squareRoot(RealMatrix m) { if (m instanceof DiagonalMatrix) { final int dim = m.getRowDimension(); final RealMatrix sqrtM = new DiagonalMatrix(dim); for (int i = 0; i < dim; i++) { sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i))); } return sqrtM; } else { final EigenDecomposition dec = new EigenDecomposition(m); return dec.getSquareRoot(); } } }']
['D4j_id: Math-37', 'CodRep_id: Dataset3-7612', 'D4j_bug: * @since 1.2 */ public Complex tan() { if (isNaN) { return NaN; } double real2 = 2.0 * real; double imaginary2 = 2.0 * imaginary;', 'D4j_fix: * @since 1.2 */ public Complex tan() { if (isNaN || Double.isInfinite(real)) { return NaN; } if (imaginary > 20.0) { return createComplex(0.0, 1.0); } if (imaginary < -20.0) { return createComplex(0.0, -1.0); } double real2 = 2.0 * real; double imaginary2 = 2.0 * imaginary;']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-7627', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-6', 'CodRep_id: Dataset3-7630', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-7632', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-7632', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-7633', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-7633', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-7932', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Lang-56', 'CodRep_id: Dataset3-8128', 'D4j_bug: /** * The parsed rules. */ private Rule[] mRules; /** * The estimated maximum length. */ private int mMaxLengthEstimate; //----------------------------------------------------------------------- /**', 'D4j_fix: /** * The parsed rules. */ private transient Rule[] mRules; /** * The estimated maximum length. */ private transient int mMaxLengthEstimate; //----------------------------------------------------------------------- /**']
['D4j_id: Math-92', 'CodRep_id: Dataset3-8220', 'D4j_bug: if ((k == 1) || (k == n - 1)) { return n; } long result = Math.round(binomialCoefficientDouble(n, k)); if (result == Long.MAX_VALUE) { throw new ArithmeticException( "result too large to represent in a long integer"); } // Use symmetry for large k // We use the formula // (n choose k) = n! / (n-k)! / k! // (n choose k) == ((n-k+1)*...*n) / (1*...*k) // which could be written // (n choose k) == (n-1 choose k-1) * n / k // For n <= 61, the naive implementation cannot overflow. // For n > 61 but n <= 66, the result cannot overflow, // but we must take care not to overflow intermediate values. // We know that (result * i) is divisible by j, // but (result * i) may overflow, so we split j: // Filter out the gcd, d, so j/d and i/d are integer. // result is divisible by (j/d) because (j/d) // is relative prime to (i/d) and is a divisor of // result * (i/d). // For n > 66, a result overflow might occur, so we check // the multiplication, taking care to not overflow // unnecessary. return result; }', 'D4j_fix: if ((k == 1) || (k == n - 1)) { return n; } // Use symmetry for large k if (k > n / 2) return binomialCoefficient(n, n - k); // We use the formula // (n choose k) = n! / (n-k)! / k! // (n choose k) == ((n-k+1)*...*n) / (1*...*k) // which could be written // (n choose k) == (n-1 choose k-1) * n / k long result = 1; if (n <= 61) { // For n <= 61, the naive implementation cannot overflow. for (int j = 1, i = n - k + 1; j <= k; i++, j++) { result = result * i / j; } } else if (n <= 66) { // For n > 61 but n <= 66, the result cannot overflow, // but we must take care not to overflow intermediate values. for (int j = 1, i = n - k + 1; j <= k; i++, j++) { // We know that (result * i) is divisible by j, // but (result * i) may overflow, so we split j: // Filter out the gcd, d, so j/d and i/d are integer. // result is divisible by (j/d) because (j/d) // is relative prime to (i/d) and is a divisor of // result * (i/d). long d = gcd(i, j); result = (result / (j / d)) * (i / d); } } else { // For n > 66, a result overflow might occur, so we check // the multiplication, taking care to not overflow // unnecessary. for (int j = 1, i = n - k + 1; j <= k; i++, j++) { long d = gcd(i, j); result = mulAndCheck((result / (j / d)), (i / d)); } } return result; }']
['D4j_id: Math-99', 'CodRep_id: Dataset3-8220', 'D4j_bug: return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); return lcm; }', 'D4j_fix: return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); if (lcm == Integer.MIN_VALUE){ throw new ArithmeticException("overflow: lcm is 2^31"); } return lcm; }']
['D4j_id: Csv-4', 'CodRep_id: Dataset3-8399', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Compress-22', 'CodRep_id: Dataset3-8430', 'D4j_bug: private InputStream in; private final boolean decompressConcatenated; private int currentChar = -1; private static final int EOF = 0; private static final int START_BLOCK_STATE = 1; private static final int RAND_PART_A_STATE = 2;', 'D4j_fix: private InputStream in; private final boolean decompressConcatenated; private static final int EOF = 0; private static final int START_BLOCK_STATE = 1; private static final int RAND_PART_A_STATE = 2;']
['D4j_id: Csv-5', 'CodRep_id: Dataset3-8484', 'D4j_bug: */ public void println() throws IOException { final String recordSeparator = format.getRecordSeparator(); out.append(recordSeparator); newRecord = true; }', 'D4j_fix: */ public void println() throws IOException { final String recordSeparator = format.getRecordSeparator(); if (recordSeparator != null) { out.append(recordSeparator); } newRecord = true; }']
['D4j_id: Lang-23', 'CodRep_id: Dataset3-8720', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-8720', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Compress-5', 'CodRep_id: Dataset3-8767', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Math-17', 'CodRep_id: Dataset3-8837', 'D4j_bug: * @return product of this and x */ public Dfp multiply(final int x) { return multiplyFast(x); } /** Multiply this by a single digit 0&lt;=x&lt;radix.', 'D4j_fix: * @return product of this and x */ public Dfp multiply(final int x) { if (x >= 0 && x < RADIX) { return multiplyFast(x); } else { return multiply(newInstance(x)); } } /** Multiply this by a single digit 0&lt;=x&lt;radix.']
['D4j_id: Math-54', 'CodRep_id: Dataset3-8837', 'D4j_bug: // Zero or sub-normal if (x == 0) { // make sure 0 has the right sign return; }', 'D4j_fix: // Zero or sub-normal if (x == 0) { // make sure 0 has the right sign if ((bits & 0x8000000000000000L) != 0) { sign = -1; } return; }']
['D4j_id: Lang-9', 'CodRep_id: Dataset3-8854', 'D4j_bug: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }', 'D4j_fix: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if (patternMatcher.regionStart() != patternMatcher.regionEnd()) { throw new IllegalArgumentException("Failed to parse \\""+pattern+"\\" ; gave up at index "+patternMatcher.regionStart()); } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }']
['D4j_id: Math-70', 'CodRep_id: Dataset3-8885', 'D4j_bug: /** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(min, max); } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(f, min, max); } /** {@inheritDoc} */']
['D4j_id: Math-78', 'CodRep_id: Dataset3-8899', 'D4j_bug: if (g0Positive ^ (gb >= 0)) { // there is a sign change: an event is expected during this step // this is a corner case: // - there was an event near ta, // - there is another event between ta and tb', 'D4j_fix: if (g0Positive ^ (gb >= 0)) { // there is a sign change: an event is expected during this step if (ga * gb > 0) { // this is a corner case: // - there was an event near ta, // - there is another event between ta and tb']
['D4j_id: Math-64', 'CodRep_id: Dataset3-8921', 'D4j_bug: double[] diag = new double[cols]; double[] oldX = new double[cols]; double[] oldRes = new double[rows]; double[] work1 = new double[cols]; double[] work2 = new double[cols]; double[] work3 = new double[cols];', 'D4j_fix: double[] diag = new double[cols]; double[] oldX = new double[cols]; double[] oldRes = new double[rows]; double[] oldObj = new double[rows]; double[] qtf = new double[rows]; double[] work1 = new double[cols]; double[] work2 = new double[cols]; double[] work3 = new double[cols];']
['D4j_id: Math-66', 'CodRep_id: Dataset3-8927', 'D4j_bug: u = x + d; } double fu = computeObjectiveValue(f, u); if (goalType == GoalType.MAXIMIZE) { fu = -fu; }', 'D4j_fix: u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; }']
['D4j_id: Math-62', 'CodRep_id: Dataset3-8928', 'D4j_bug: final GoalType goal, final double min, final double max) throws FunctionEvaluationException { return optimize(f, goal, min, max, 0); } /** {@inheritDoc} */', 'D4j_fix: final GoalType goal, final double min, final double max) throws FunctionEvaluationException { return optimize(f, goal, min, max, min + 0.5 * (max - min)); } /** {@inheritDoc} */']
['D4j_id: Compress-7', 'CodRep_id: Dataset3-9392', 'D4j_bug: int end = offset + length; for (int i = offset; i < end; ++i) { if (buffer[i] == 0) { break; } result.append((char) buffer[i]); } return result.toString();', 'D4j_fix: int end = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString();']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9392', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-9392', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Compress-5', 'CodRep_id: Dataset3-9438', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Math-42', 'CodRep_id: Dataset3-9458', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Collections-11', 'CodRep_id: Dataset3-9520', 'D4j_bug: * only stable for the same process). * @return the instance with recalculated hash code */ }', 'D4j_fix: * only stable for the same process). * @return the instance with recalculated hash code */ private Object readResolve() { calculateHashCode(keys); return this; } }']
['D4j_id: Compress-5', 'CodRep_id: Dataset3-9689', 'D4j_bug: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0 && inf.finished()) { return -1; } crc.update(buffer, start, read); return read;', 'D4j_fix: } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException("Truncated ZIP file"); } } crc.update(buffer, start, read); return read;']
['D4j_id: Math-100', 'CodRep_id: Dataset3-9704', 'D4j_bug: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {', 'D4j_fix: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getUnboundParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {']
['D4j_id: Math-10', 'CodRep_id: Dataset3-9744', 'D4j_bug: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly }', 'D4j_fix: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]); }']
['D4j_id: Math-4', 'CodRep_id: Dataset3-9748', 'D4j_bug: // compute the intersection on infinite line Vector3D v1D = line.intersection(subLine.line); // check location of point with respect to first sub-line Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));', 'D4j_fix: // compute the intersection on infinite line Vector3D v1D = line.intersection(subLine.line); if (v1D == null) { return null; } // check location of point with respect to first sub-line Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));']
['D4j_id: Math-32', 'CodRep_id: Dataset3-9749', 'D4j_bug: if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if ((Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);', 'D4j_fix: if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if (tree.getCut() == null && (Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);']
['D4j_id: Math-4', 'CodRep_id: Dataset3-9750', 'D4j_bug: // compute the intersection on infinite line Vector2D v2D = line1.intersection(line2); // check location of point with respect to first sub-line Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));', 'D4j_fix: // compute the intersection on infinite line Vector2D v2D = line1.intersection(line2); if (v2D == null) { return null; } // check location of point with respect to first sub-line Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));']
['D4j_id: Math-44', 'CodRep_id: Dataset3-9751', 'D4j_bug: double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false; // initialize the events states if needed if (! statesInitialized) {', 'D4j_fix: double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); // initialize the events states if needed if (! statesInitialized) {']
['D4j_id: Math-33', 'CodRep_id: Dataset3-9752', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-42', 'CodRep_id: Dataset3-9752', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Math-33', 'CodRep_id: Dataset3-9753', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-42', 'CodRep_id: Dataset3-9753', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9804', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-9804', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Csv-3', 'CodRep_id: Dataset3-9825', 'D4j_bug: throw new IOException("EOF whilst processing escape sequence"); default: // Now check for meta-characters return c; // indicate unexpected char - available from in.getLastChar() } }', 'D4j_fix: throw new IOException("EOF whilst processing escape sequence"); default: // Now check for meta-characters if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) { return c; } // indicate unexpected char - available from in.getLastChar() return END_OF_STREAM; } }']
['D4j_id: Math-79', 'CodRep_id: Dataset3-9846', 'D4j_bug: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);', 'D4j_fix: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { final double dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);']
['D4j_id: Lang-35', 'CodRep_id: Dataset3-9906', 'D4j_bug: } else if (element != null) { clss = element.getClass(); } else { return (T[]) new Object[] { null }; } @SuppressWarnings("unchecked") // the add method creates an array of type clss, which is type T final T[] newArray = (T[]) add(array, index, element, clss);', 'D4j_fix: } else if (element != null) { clss = element.getClass(); } else { throw new IllegalArgumentException("Array and element cannot both be null"); } @SuppressWarnings("unchecked") // the add method creates an array of type clss, which is type T final T[] newArray = (T[]) add(array, index, element, clss);']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9979', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-17', 'CodRep_id: Dataset3-9979', "D4j_bug: } // May have additional NULs or spaces trailer = buffer[end - 1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) {", "D4j_fix: } // May have additional NULs or spaces trailer = buffer[end - 1]; while (start < end - 1 && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) {"]
['D4j_id: Compress-27', 'CodRep_id: Dataset3-9979', 'D4j_bug: end--; trailer = buffer[end - 1]; } if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start];', 'D4j_fix: end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];']
['D4j_id: Compress-31', 'CodRep_id: Dataset3-9979', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
['D4j_id: Codec-6', 'CodRep_id: Dataset3-9999', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Math-3', 'CodRep_id: Dataset3-10006', 'D4j_bug: throw new DimensionMismatchException(len, b.length); } // Revert to scalar multiplication. final double[] prodHigh = new double[len]; double prodLowSum = 0;', 'D4j_fix: throw new DimensionMismatchException(len, b.length); } if (len == 1) { // Revert to scalar multiplication. return a[0] * b[0]; } final double[] prodHigh = new double[len]; double prodLowSum = 0;']
['D4j_id: Lang-20', 'CodRep_id: Dataset3-10060', 'D4j_bug: return EMPTY; } StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {', 'D4j_fix: return EMPTY; } StringBuilder buf = new StringBuilder(noOfItems * 16); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-10060', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-10060', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-10227', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Math-82', 'CodRep_id: Dataset3-10330', 'D4j_bug: for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio;', 'D4j_fix: for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) > 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio;']
['D4j_id: Math-55', 'CodRep_id: Dataset3-10498', 'D4j_bug: */ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) { // rescale both vectors without losing precision, // to ensure their norm are the same order of magnitude // we reduce cancellation errors by preconditioning, // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute', 'D4j_fix: */ public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) { final double n1 = v1.getNormSq(); final double n2 = v2.getNormSq(); if ((n1 * n2) < MathUtils.SAFE_MIN) { return ZERO; } // rescale both vectors without losing precision, // to ensure their norm are the same order of magnitude final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4; final double x1 = FastMath.scalb(v1.x, -deltaExp); final double y1 = FastMath.scalb(v1.y, -deltaExp); final double z1 = FastMath.scalb(v1.z, -deltaExp); final double x2 = FastMath.scalb(v2.x, deltaExp); final double y2 = FastMath.scalb(v2.y, deltaExp); final double z2 = FastMath.scalb(v2.z, deltaExp); // we reduce cancellation errors by preconditioning, // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute']
['D4j_id: Lang-54', 'CodRep_id: Dataset3-10525', 'D4j_bug: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);', 'D4j_fix: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); if (ch3 == \'_\') { return new Locale(str.substring(0, 2), "", str.substring(4)); } char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-10525', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-32', 'CodRep_id: Dataset3-10763', 'D4j_bug: * * @since 2.3 */ private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() { @Override protected Set<IDKey> initialValue() { return new HashSet<IDKey>(); } }; /* * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()', 'D4j_fix: * * @since 2.3 */ private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>(); /* * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()']
['D4j_id: Math-86', 'CodRep_id: Dataset3-10800', 'D4j_bug: final double[] lI = lTData[i]; if (lTData[i][i] < absolutePositivityThreshold) { throw new NotPositiveDefiniteMatrixException(); } // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];', 'D4j_fix: final double[] lI = lTData[i]; // check off-diagonal elements (and reset them to 0) for (int j = i + 1; j < order; ++j) { final double[] lJ = lTData[j];']
['D4j_id: Math-64', 'CodRep_id: Dataset3-10810', 'D4j_bug: (delta <= parRelativeTolerance * xNorm)) { return current; } } else { if (checker.converged(getIterations(), previous, current)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)', 'D4j_fix: (delta <= parRelativeTolerance * xNorm)) { return current; } } // tests for termination and stringent tolerances // (2.2204e-16 is the machine epsilon for IEEE754)']
['D4j_id: Math-68', 'CodRep_id: Dataset3-10810', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Lang-9', 'CodRep_id: Dataset3-11204', 'D4j_bug: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }', 'D4j_fix: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if (patternMatcher.regionStart() != patternMatcher.regionEnd()) { throw new IllegalArgumentException("Failed to parse \\""+pattern+"\\" ; gave up at index "+patternMatcher.regionStart()); } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }']
['D4j_id: Lang-54', 'CodRep_id: Dataset3-11264', 'D4j_bug: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);', 'D4j_fix: throw new IllegalArgumentException("Invalid locale format: " + str); } char ch3 = str.charAt(3); if (ch3 == \'_\') { return new Locale(str.substring(0, 2), "", str.substring(4)); } char ch4 = str.charAt(4); if (ch3 < \'A\' || ch3 > \'Z\' || ch4 < \'A\' || ch4 > \'Z\') { throw new IllegalArgumentException("Invalid locale format: " + str);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-11264', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-59', 'CodRep_id: Dataset3-11411', 'D4j_bug: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);', 'D4j_fix: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-11411', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-11411', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Lang-23', 'CodRep_id: Dataset3-11638', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-11638', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Math-106', 'CodRep_id: Dataset3-12147', "D4j_bug: return null; } // minus signs should be leading, invalid expression // parse '/' int startIndex = pos.getIndex();", "D4j_fix: return null; } if (num.intValue() < 0) { // minus signs should be leading, invalid expression pos.setIndex(initialIndex); return null; } // parse '/' int startIndex = pos.getIndex();"]
['D4j_id: Collections-1', 'CodRep_id: Dataset3-12616', 'D4j_bug: switch (nextIndex) { case 3: parent.value3 = value; case 2: parent.value2 = value; case 1: parent.value1 = value; } return old; }', 'D4j_fix: switch (nextIndex) { case 3: parent.value3 = value; break; case 2: parent.value2 = value; break; case 1: parent.value1 = value; break; } return old; }']
['D4j_id: Collections-3', 'CodRep_id: Dataset3-12629', 'D4j_bug: * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken) */ public static Collection removeAll(Collection collection, Collection remove) { return ListUtils.retainAll(collection, remove); } //-----------------------------------------------------------------------', 'D4j_fix: * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken) */ public static Collection removeAll(Collection collection, Collection remove) { return ListUtils.removeAll(collection, remove); } //-----------------------------------------------------------------------']
['D4j_id: Lang-9', 'CodRep_id: Dataset3-12665', 'D4j_bug: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }', 'D4j_fix: currentFormatField= nextFormatField; currentStrategy= nextStrategy; } if (patternMatcher.regionStart() != patternMatcher.regionEnd()) { throw new IllegalArgumentException("Failed to parse \\""+pattern+"\\" ; gave up at index "+patternMatcher.regionStart()); } if(currentStrategy.addRegex(this, regex)) { collector.add(currentStrategy); }']
['D4j_id: Lang-8', 'CodRep_id: Dataset3-12666', 'D4j_bug: private static class TimeZoneNameRule implements Rule { private final Locale mLocale; private final int mStyle; private final TimeZone zone; private final String mStandard; private final String mDaylight;', 'D4j_fix: private static class TimeZoneNameRule implements Rule { private final Locale mLocale; private final int mStyle; private final String mStandard; private final String mDaylight;']
['D4j_id: Lang-18', 'CodRep_id: Dataset3-12666', "D4j_bug: rule = new TextField(Calendar.ERA, ERAs); break; case 'y': // year (number) if (tokenLen >= 4) { rule = selectNumberRule(Calendar.YEAR, tokenLen); } else { rule = TwoDigitYearField.INSTANCE; } break; case 'M': // month in year (text and number)", "D4j_fix: rule = new TextField(Calendar.ERA, ERAs); break; case 'y': // year (number) if (tokenLen == 2) { rule = TwoDigitYearField.INSTANCE; } else { rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen); } break; case 'M': // month in year (text and number)"]
['D4j_id: Collections-2', 'CodRep_id: Dataset3-12672', 'D4j_bug: * This is the name of the property that can point to other * properties file for including other properties files. */ /** * This is the default name of the property that can point to other', 'D4j_fix: * This is the name of the property that can point to other * properties file for including other properties files. */ private String includePropertyName = null; /** * This is the default name of the property that can point to other']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-12672', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Collections-12', 'CodRep_id: Dataset3-12672', 'D4j_bug: public void combine(ExtendedProperties props) { for (Iterator it = props.getKeys(); it.hasNext();) { String key = (String) it.next(); super.put(key, props.get(key)); } }', 'D4j_fix: public void combine(ExtendedProperties props) { for (Iterator it = props.getKeys(); it.hasNext();) { String key = (String) it.next(); clearProperty(key); addPropertyDirect(key, props.get(key)); } }']
['D4j_id: Collections-13', 'CodRep_id: Dataset3-12672', 'D4j_bug: for (Enumeration e = props.propertyNames(); e.hasMoreElements();) { String s = (String) e.nextElement(); c.setProperty(s, props.getProperty(s)); } return c;', 'D4j_fix: for (Enumeration e = props.propertyNames(); e.hasMoreElements();) { String s = (String) e.nextElement(); String value = props.getProperty(s); if(value != null) { c.setProperty(s, value); } } return c;']
['D4j_id: Lang-1', 'CodRep_id: Dataset3-12678', 'D4j_bug: } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str);', "D4j_fix: } } if (pfxLen > 0) { // we have a hex number char firstSigDigit = 0; // strip leading zeroes for(int i = pfxLen; i < str.length(); i++) { firstSigDigit = str.charAt(i); if (firstSigDigit == '0') { // count leading zeroes pfxLen++; } else { break; } } final int hexDigits = str.length() - pfxLen; if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long return createBigInteger(str); } if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int return createLong(str); } return createInteger(str);"]
['D4j_id: Lang-3', 'CodRep_id: Dataset3-12678', 'D4j_bug: //Must be a Float, Double, BigDecimal final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number }', 'D4j_fix: //Must be a Float, Double, BigDecimal final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number } try { if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } } catch (final NumberFormatException nfe) { // NOPMD // ignore the bad number }']
['D4j_id: Lang-7', 'CodRep_id: Dataset3-12678', 'D4j_bug: if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } // this is protection for poorness in java.lang.BigDecimal. // it accepts this as a legal value, but it does not appear // to be in specification of class. OS X Java parses it to // a wrong value. return new BigDecimal(str); }', 'D4j_fix: if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.trim().startsWith("--")) { // this is protection for poorness in java.lang.BigDecimal. // it accepts this as a legal value, but it does not appear // to be in specification of class. OS X Java parses it to // a wrong value. throw new NumberFormatException(str + " is not a valid number."); } return new BigDecimal(str); }']
['D4j_id: Lang-24', 'CodRep_id: Dataset3-12678', "D4j_bug: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp; } // last character is illegal return false;", "D4j_fix: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;"]
['D4j_id: Lang-36', 'CodRep_id: Dataset3-12678', 'D4j_bug: } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {', "D4j_fix: } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {"]
['D4j_id: Lang-23', 'CodRep_id: Dataset3-12725', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-12725', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Collections-1', 'CodRep_id: Dataset3-12748', 'D4j_bug: switch (nextIndex) { case 3: parent.value3 = value; case 2: parent.value2 = value; case 1: parent.value1 = value; } return old; }', 'D4j_fix: switch (nextIndex) { case 3: parent.value3 = value; break; case 2: parent.value2 = value; break; case 1: parent.value1 = value; break; } return old; }']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-12818', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Compress-13', 'CodRep_id: Dataset3-12818', 'D4j_bug: * @param name the name to use */ protected void setName(String name) { this.name = name; }', 'D4j_fix: * @param name the name to use */ protected void setName(String name) { if (name != null && getPlatform() == PLATFORM_FAT && name.indexOf("/") == -1) { name = name.replace(\'\\\\\', \'/\'); } this.name = name; }']
['D4j_id: Compress-15', 'CodRep_id: Dataset3-12818', 'D4j_bug: String myComment = getComment(); String otherComment = other.getComment(); if (myComment == null) { if (otherComment != null) { return false; } } else if (!myComment.equals(otherComment)) { return false; } return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes()', 'D4j_fix: String myComment = getComment(); String otherComment = other.getComment(); if (myComment == null) { myComment = ""; } if (otherComment == null) { otherComment = ""; } return getTime() == other.getTime() && myComment.equals(otherComment) && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes()']
['D4j_id: Lang-13', 'CodRep_id: Dataset3-12872', 'D4j_bug: super(in); this.classLoader = classLoader; } /**', 'D4j_fix: super(in); this.classLoader = classLoader; primitiveTypes.put("byte", byte.class); primitiveTypes.put("short", short.class); primitiveTypes.put("int", int.class); primitiveTypes.put("long", long.class); primitiveTypes.put("float", float.class); primitiveTypes.put("double", double.class); primitiveTypes.put("boolean", boolean.class); primitiveTypes.put("char", char.class); primitiveTypes.put("void", void.class); } /**']
['D4j_id: Collections-1', 'CodRep_id: Dataset3-12915', 'D4j_bug: switch (nextIndex) { case 3: parent.value3 = value; case 2: parent.value2 = value; case 1: parent.value1 = value; } return old; }', 'D4j_fix: switch (nextIndex) { case 3: parent.value3 = value; break; case 2: parent.value2 = value; break; case 1: parent.value1 = value; break; } return old; }']
['D4j_id: Lang-13', 'CodRep_id: Dataset3-12998', 'D4j_bug: super(in); this.classLoader = classLoader; } /**', 'D4j_fix: super(in); this.classLoader = classLoader; primitiveTypes.put("byte", byte.class); primitiveTypes.put("short", short.class); primitiveTypes.put("int", int.class); primitiveTypes.put("long", long.class); primitiveTypes.put("float", float.class); primitiveTypes.put("double", double.class); primitiveTypes.put("boolean", boolean.class); primitiveTypes.put("char", char.class); primitiveTypes.put("void", void.class); } /**']
['D4j_id: Lang-65', 'CodRep_id: Dataset3-13052', 'D4j_bug: throw new ArithmeticException("Calendar value too large for accurate calculations"); } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59', 'D4j_fix: throw new ArithmeticException("Calendar value too large for accurate calculations"); } if (field == Calendar.MILLISECOND) { return; } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59']
['D4j_id: Math-22', 'CodRep_id: Dataset3-13108', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportUpperBoundInclusive() { return false; } /**', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportUpperBoundInclusive() { return true; } /**']
['D4j_id: Compress-2', 'CodRep_id: Dataset3-13227', 'D4j_bug: * If getNextEnxtry has been called, the entry metadata is stored in * currentEntry. */ /* * The offset where the current entry started. -1 if no entry has been * called */ public ArArchiveInputStream( final InputStream pInput ) { input = pInput;', 'D4j_fix: * If getNextEnxtry has been called, the entry metadata is stored in * currentEntry. */ private ArArchiveEntry currentEntry = null; /* * The offset where the current entry started. -1 if no entry has been * called */ private long entryOffset = -1; public ArArchiveInputStream( final InputStream pInput ) { input = pInput;']
['D4j_id: Math-101', 'CodRep_id: Dataset3-13247', 'D4j_bug: int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { // set index back to initial, error index should be the start index', 'D4j_fix: int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; if ((startIndex >= source.length()) || (endIndex > source.length()) || source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { // set index back to initial, error index should be the start index']
['D4j_id: Compress-10', 'CodRep_id: Dataset3-13253', 'D4j_bug: // the hashcode - see COMPRESS-164 // Map needs to be reconstructed in order to keep central // directory order for (ZipArchiveEntry ze : entries.keySet()) { OffsetEntry offsetEntry = entries.get(ze); long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT];', 'D4j_fix: // the hashcode - see COMPRESS-164 // Map needs to be reconstructed in order to keep central // directory order Map<ZipArchiveEntry, OffsetEntry> origMap = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries); entries.clear(); for (ZipArchiveEntry ze : origMap.keySet()) { OffsetEntry offsetEntry = origMap.get(ze); long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT];']
['D4j_id: Math-79', 'CodRep_id: Dataset3-13670', 'D4j_bug: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);', 'D4j_fix: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { final double dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);']
['D4j_id: Lang-63', 'CodRep_id: Dataset3-13859', 'D4j_bug: } return buffer.toString(); } static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff; } else { return 0; } } static final Object y = "y"; static final Object M = "M";', 'D4j_fix: } return buffer.toString(); } static final Object y = "y"; static final Object M = "M";']
['D4j_id: Math-64', 'CodRep_id: Dataset3-13876', 'D4j_bug: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); current = new VectorialPointValuePair(point, objective); // compute the scaled actual reduction double actRed = -1.0;', 'D4j_fix: // evaluate the function at x + p and calculate its norm updateResidualsAndCost(); // compute the scaled actual reduction double actRed = -1.0;']
['D4j_id: Math-3', 'CodRep_id: Dataset3-13907', 'D4j_bug: throw new DimensionMismatchException(len, b.length); } // Revert to scalar multiplication. final double[] prodHigh = new double[len]; double prodLowSum = 0;', 'D4j_fix: throw new DimensionMismatchException(len, b.length); } if (len == 1) { // Revert to scalar multiplication. return a[0] * b[0]; } final double[] prodHigh = new double[len]; double prodLowSum = 0;']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-13927', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-13927', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-13928', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-13928', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Lang-21', 'CodRep_id: Dataset3-13981', 'D4j_bug: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&', 'D4j_fix: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&']
['D4j_id: Lang-65', 'CodRep_id: Dataset3-13981', 'D4j_bug: throw new ArithmeticException("Calendar value too large for accurate calculations"); } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59', 'D4j_fix: throw new ArithmeticException("Calendar value too large for accurate calculations"); } if (field == Calendar.MILLISECOND) { return; } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59']
['D4j_id: Math-74', 'CodRep_id: Dataset3-14041', 'D4j_bug: } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);', 'D4j_fix: } if (firstTime) { final double[] scale = new double[y0.length]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]); } } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);']
['D4j_id: Compress-4', 'CodRep_id: Dataset3-14052', 'D4j_bug: results.addedFromChangeSet(change.getEntry().getName()); } } return results; }', 'D4j_fix: results.addedFromChangeSet(change.getEntry().getName()); } } out.finish(); return results; }']
['D4j_id: Lang-17', 'CodRep_id: Dataset3-14172', 'D4j_bug: return; } int pos = 0; int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } else { // // contract with translators is that they have to understand codepoints // // and they just took care of a surrogate pair for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { pos++; } } pos--; } pos++; } }', 'D4j_fix: return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } // // contract with translators is that they have to understand codepoints // // and they just took care of a surrogate pair for (int pt = 0; pt < consumed; pt++) { pos += Character.charCount(Character.codePointAt(input, pos)); } } }']
['D4j_id: Math-91', 'CodRep_id: Dataset3-14239', 'D4j_bug: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }', 'D4j_fix: * than <tt>object</tt>, 0 if they are equal. */ public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator; long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); }']
['D4j_id: Math-44', 'CodRep_id: Dataset3-14260', 'D4j_bug: double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false; // initialize the events states if needed if (! statesInitialized) {', 'D4j_fix: double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); // initialize the events states if needed if (! statesInitialized) {']
['D4j_id: Compress-20', 'CodRep_id: Dataset3-14264', 'D4j_bug: ret.setInode(readAsciiLong(8, 16)); long mode = readAsciiLong(8, 16); if (mode != 0){ ret.setMode(mode); } ret.setUID(readAsciiLong(8, 16));', 'D4j_fix: ret.setInode(readAsciiLong(8, 16)); long mode = readAsciiLong(8, 16); if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0 ret.setMode(mode); } ret.setUID(readAsciiLong(8, 16));']
['D4j_id: Csv-2', 'CodRep_id: Dataset3-14295', 'D4j_bug: "No header mapping was specified, the record values can\'t be accessed by name"); } final Integer index = mapping.get(name); return index != null ? values[index.intValue()] : null; } /**', 'D4j_fix: "No header mapping was specified, the record values can\'t be accessed by name"); } final Integer index = mapping.get(name); try { return index != null ? values[index.intValue()] : null; } catch (ArrayIndexOutOfBoundsException e) { throw new IllegalArgumentException( String.format( "Index for header \'%s\' is %d but CSVRecord only has %d values!", name, index.intValue(), values.length)); } } /**']
['D4j_id: Lang-47', 'CodRep_id: Dataset3-14540', 'D4j_bug: if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(strLen - width, strLen, buffer, size);', 'D4j_fix: if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); if (str == null) { str = ""; } int strLen = str.length(); if (strLen >= width) { str.getChars(strLen - width, strLen, buffer, size);']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-14540', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-14540', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Compress-1', 'CodRep_id: Dataset3-14630', 'D4j_bug: */ public void close() throws IOException { if (!this.closed) { super.close(); this.closed = true; }', 'D4j_fix: */ public void close() throws IOException { if (!this.closed) { this.finish(); super.close(); this.closed = true; }']
['D4j_id: Lang-21', 'CodRep_id: Dataset3-14673', 'D4j_bug: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&', 'D4j_fix: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&']
['D4j_id: Lang-65', 'CodRep_id: Dataset3-14673', 'D4j_bug: throw new ArithmeticException("Calendar value too large for accurate calculations"); } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59', 'D4j_fix: throw new ArithmeticException("Calendar value too large for accurate calculations"); } if (field == Calendar.MILLISECOND) { return; } // ----------------- Fix for LANG-59 ---------------------- START --------------- // see http://issues.apache.org/jira/browse/LANG-59']
['D4j_id: Math-1', 'CodRep_id: Dataset3-14709', 'D4j_bug: if ((p2 > overflow) || (q2 > overflow)) { // in maxDenominator mode, if the last fraction was very close to the actual value // q2 may overflow in the next iteration; in this case return the last one. throw new FractionConversionException(value, p2, q2); }', 'D4j_fix: if ((p2 > overflow) || (q2 > overflow)) { // in maxDenominator mode, if the last fraction was very close to the actual value // q2 may overflow in the next iteration; in this case return the last one. if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { break; } throw new FractionConversionException(value, p2, q2); }']
['D4j_id: Math-106', 'CodRep_id: Dataset3-14710', "D4j_bug: return null; } // minus signs should be leading, invalid expression // parse '/' int startIndex = pos.getIndex();", "D4j_fix: return null; } if (num.intValue() < 0) { // minus signs should be leading, invalid expression pos.setIndex(initialIndex); return null; } // parse '/' int startIndex = pos.getIndex();"]
['D4j_id: Math-6', 'CodRep_id: Dataset3-14713', 'D4j_bug: // Outer loop. lmPar = 0; boolean firstIteration = true; int iter = 0; final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker(); while (true) { ++iter; final PointVectorValuePair previous = current; // QR decomposition of the jacobian matrix', 'D4j_fix: // Outer loop. lmPar = 0; boolean firstIteration = true; final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker(); while (true) { incrementIterationCount(); final PointVectorValuePair previous = current; // QR decomposition of the jacobian matrix']
['D4j_id: Lang-39', 'CodRep_id: Dataset3-14857', 'D4j_bug: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches', 'D4j_fix: // count the replacement text elements that are larger than their corresponding text being replaced for (int i = 0; i < searchList.length; i++) { if (searchList[i] == null || replacementList[i] == null) { continue; } int greater = replacementList[i].length() - searchList[i].length(); if (greater > 0) { increase += 3 * greater; // assume 3 matches']
['D4j_id: Lang-40', 'CodRep_id: Dataset3-14857', 'D4j_bug: if (str == null || searchStr == null) { return false; } return contains(str.toUpperCase(), searchStr.toUpperCase()); } // IndexOfAny chars', 'D4j_fix: if (str == null || searchStr == null) { return false; } int len = searchStr.length(); int max = str.length() - len; for (int i = 0; i <= max; i++) { if (str.regionMatches(true, i, searchStr, 0, len)) { return true; } } return false; } // IndexOfAny chars']
['D4j_id: Compress-1', 'CodRep_id: Dataset3-14905', 'D4j_bug: */ public void close() throws IOException { if (!this.closed) { super.close(); this.closed = true; }', 'D4j_fix: */ public void close() throws IOException { if (!this.closed) { this.finish(); super.close(); this.closed = true; }']
['D4j_id: Math-33', 'CodRep_id: Dataset3-14930', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-42', 'CodRep_id: Dataset3-14930', 'D4j_bug: continue; } Integer basicRow = getBasicRow(colIndex); // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);', 'D4j_fix: continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) { // if the basic row is found to be the objective function row // set the coefficient to 0 -> this case handles unconstrained // variables that are still part of the objective function coefficients[i] = 0; } else if (basicRows.contains(basicRow)) { // if multiple variables can take a given value // then we choose the first and set the rest equal to 0 coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);']
['D4j_id: Math-38', 'CodRep_id: Dataset3-14931', 'D4j_bug: final int tmp2 = jpt; jpt = ipt - n; ipt = tmp2; throw new PathIsExploredException(); // XXX } final int iptMinus1 = ipt; final int jptMinus1 = jpt; interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1)); interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1)); }', 'D4j_fix: final int tmp2 = jpt; jpt = ipt - n; ipt = tmp2; // throw new PathIsExploredException(); // XXX } final int iptMinus1 = ipt - 1; final int jptMinus1 = jpt - 1; interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1)); interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1)); }']
['D4j_id: Math-23', 'CodRep_id: Dataset3-14935', 'D4j_bug: UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Best point encountered so far (which is the initial guess). int iter = 0; while (true) {', 'D4j_fix: UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Best point encountered so far (which is the initial guess). UnivariatePointValuePair best = current; int iter = 0; while (true) {']
['D4j_id: Math-66', 'CodRep_id: Dataset3-14935', 'D4j_bug: u = x + d; } double fu = computeObjectiveValue(f, u); if (goalType == GoalType.MAXIMIZE) { fu = -fu; }', 'D4j_fix: u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; }']
['D4j_id: Math-96', 'CodRep_id: Dataset3-14961', 'D4j_bug: if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { // ignore exception', 'D4j_fix: if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (real == rhs.real) && (imaginary == rhs.imaginary); } } catch (ClassCastException ex) { // ignore exception']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-15020', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Compress-13', 'CodRep_id: Dataset3-15020', 'D4j_bug: * @param name the name to use */ protected void setName(String name) { this.name = name; }', 'D4j_fix: * @param name the name to use */ protected void setName(String name) { if (name != null && getPlatform() == PLATFORM_FAT && name.indexOf("/") == -1) { name = name.replace(\'\\\\\', \'/\'); } this.name = name; }']
['D4j_id: Collections-2', 'CodRep_id: Dataset3-15069', 'D4j_bug: } try { while (true) { String line = reader.readProperty(); if (line == null) {', 'D4j_fix: } try { String includeProperty = getInclude(); while (true) { String line = reader.readProperty(); if (line == null) {']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-15069', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Collections-12', 'CodRep_id: Dataset3-15069', 'D4j_bug: public void combine(ExtendedProperties props) { for (Iterator it = props.getKeys(); it.hasNext();) { String key = (String) it.next(); super.put(key, props.get(key)); } }', 'D4j_fix: public void combine(ExtendedProperties props) { for (Iterator it = props.getKeys(); it.hasNext();) { String key = (String) it.next(); clearProperty(key); addPropertyDirect(key, props.get(key)); } }']
['D4j_id: Collections-13', 'CodRep_id: Dataset3-15069', 'D4j_bug: for (Enumeration e = props.propertyNames(); e.hasMoreElements();) { String s = (String) e.nextElement(); c.setProperty(s, props.getProperty(s)); } return c;', 'D4j_fix: for (Enumeration e = props.propertyNames(); e.hasMoreElements();) { String s = (String) e.nextElement(); String value = props.getProperty(s); if(value != null) { c.setProperty(s, value); } } return c;']
['D4j_id: Lang-63', 'CodRep_id: Dataset3-15122', 'D4j_bug: } return buffer.toString(); } static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff; } else { return 0; } } static final Object y = "y"; static final Object M = "M";', 'D4j_fix: } return buffer.toString(); } static final Object y = "y"; static final Object M = "M";']
['D4j_id: Csv-4', 'CodRep_id: Dataset3-15155', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Csv-7', 'CodRep_id: Dataset3-15155', 'D4j_bug: import java.net.URL; import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap;', 'D4j_fix: import java.net.URL; import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap;']
['D4j_id: Compress-3', 'CodRep_id: Dataset3-15274', 'D4j_bug: + "\' before the \'" + currSize + "\' bytes specified in the header were written"); } } /**', 'D4j_fix: + "\' before the \'" + currSize + "\' bytes specified in the header were written"); } haveUnclosedEntry = false; } /**']
['D4j_id: Compress-9', 'CodRep_id: Dataset3-15274', 'D4j_bug: } /** * Ends the TAR archive without closing the underlying OutputStream.', 'D4j_fix: } @Deprecated @Override public int getCount() { return (int) getBytesWritten(); } @Override public long getBytesWritten() { return ((CountingOutputStream) out).getBytesWritten(); } /** * Ends the TAR archive without closing the underlying OutputStream.']
['D4j_id: Math-79', 'CodRep_id: Dataset4-10094', 'D4j_bug: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);', 'D4j_fix: * @return the L<sub>2</sub> distance between the two points */ public static double distance(int[] p1, int[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { final double dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum);']
['D4j_id: JxPath-13', 'CodRep_id: Dataset5-22', 'D4j_bug: } } No newline at end of file }', 'D4j_fix: } } } No newline at end of file']
['D4j_id: Compress-9', 'CodRep_id: Dataset5-3111', 'D4j_bug: numToWrite -= num; wOffset += num; } count(numToWrite); } /**', 'D4j_fix: numToWrite -= num; wOffset += num; } } /**']
['D4j_id: Compress-9', 'CodRep_id: Dataset5-5966', 'D4j_bug: numToWrite -= num; wOffset += num; } count(numToWrite); } /**', 'D4j_fix: numToWrite -= num; wOffset += num; } } /**']
['D4j_id: Compress-9', 'CodRep_id: Dataset5-15504', 'D4j_bug: numToWrite -= num; wOffset += num; } count(numToWrite); } /**', 'D4j_fix: numToWrite -= num; wOffset += num; } } /**']
['D4j_id: Compress-14', 'CodRep_id: Dataset5-16738', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-31', 'CodRep_id: Dataset5-16738', "D4j_bug: for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException(", "D4j_fix: for ( ;start < end; start++) { final byte currentByte = buffer[start]; // CheckStyle:MagicNumber OFF if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException("]
