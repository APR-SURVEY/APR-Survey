['D4j_id: Math-100', 'CodRep_id: Dataset3-763', 'D4j_bug: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {', 'D4j_fix: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getUnboundParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {']
['D4j_id: Math-104', 'CodRep_id: Dataset3-876', 'D4j_bug: private static final long serialVersionUID = -6587513359895466954L; /** Maximum allowed numerical error. */ private static final double DEFAULT_EPSILON = 10e-9; /** Lanczos coefficients */ private static double[] lanczos =', 'D4j_fix: private static final long serialVersionUID = -6587513359895466954L; /** Maximum allowed numerical error. */ private static final double DEFAULT_EPSILON = 10e-15; /** Lanczos coefficients */ private static double[] lanczos =']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-1066', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-1084', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Math-10', 'CodRep_id: Dataset3-1128', 'D4j_bug: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly }', 'D4j_fix: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]); }']
['D4j_id: Compress-25', 'CodRep_id: Dataset3-1248', "D4j_bug: this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor; // haven't read anything so far } public ZipArchiveEntry getNextZipEntry() throws IOException {", "D4j_fix: this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor; // haven't read anything so far buf.limit(0); } public ZipArchiveEntry getNextZipEntry() throws IOException {"]
['D4j_id: Codec-3', 'CodRep_id: Dataset3-1279', 'D4j_bug: if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) { //-- obvious germanic --// result.append(\'K\'); } else if (contains(value, index + 1, 4, "IER")) { result.append(\'J\'); } else { result.append(\'J\', \'K\');', 'D4j_fix: if ((contains(value, 0 ,4, "VAN ", "VON ") || contains(value, 0, 3, "SCH")) || contains(value, index + 1, 2, "ET")) { //-- obvious germanic --// result.append(\'K\'); } else if (contains(value, index + 1, 3, "IER")) { result.append(\'J\'); } else { result.append(\'J\', \'K\');']
['D4j_id: Lang-30', 'CodRep_id: Dataset3-1293', 'D4j_bug: return INDEX_NOT_FOUND; } int csLen = cs.length(); int searchLen = searchChars.length; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { // ch is a supplementary character return i; } } }', 'D4j_fix: return INDEX_NOT_FOUND; } int csLen = cs.length(); int csLast = csLen - 1; int searchLen = searchChars.length; int searchLast = searchLen - 1; for (int i = 0; i < csLen; i++) { char ch = cs.charAt(i); for (int j = 0; j < searchLen; j++) { if (searchChars[j] == ch) { if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) { // ch is a supplementary character if (searchChars[j + 1] == cs.charAt(i + 1)) { return i; } } else { return i; } } } }']
['D4j_id: Math-33', 'CodRep_id: Dataset3-1340', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-33', 'CodRep_id: Dataset3-1737', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-1747', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-1816', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-20', 'CodRep_id: Dataset3-1856', 'D4j_bug: return EMPTY; } StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {', 'D4j_fix: return EMPTY; } StringBuilder buf = new StringBuilder(noOfItems * 16); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-1917', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Math-81', 'CodRep_id: Dataset3-1990', 'D4j_bug: lowerSpectra = Math.min(lowerSpectra, lower); final double upper = dCurrent + eCurrent; work[upperStart + m - 1] = upper; minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax); }', 'D4j_fix: lowerSpectra = Math.min(lowerSpectra, lower); final double upper = dCurrent + eCurrent; work[upperStart + m - 1] = upper; upperSpectra = Math.max(upperSpectra, upper); minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax); }']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-2088', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-2088', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Math-72', 'CodRep_id: Dataset3-2250', 'D4j_bug: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }', 'D4j_fix: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); return result; }']
['D4j_id: Math-77', 'CodRep_id: Dataset3-2287', 'D4j_bug: public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; }', 'D4j_fix: public double getLInfNorm() { double max = 0; for (double a : data) { max = Math.max(max, Math.abs(a)); } return max; }']
['D4j_id: Math-98', 'CodRep_id: Dataset3-2288', 'D4j_bug: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {', 'D4j_fix: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {']
['D4j_id: Math-75', 'CodRep_id: Dataset3-2308', 'D4j_bug: */ @Deprecated public double getPct(Object v) { return getCumPct((Comparable<?>) v); } /**', 'D4j_fix: */ @Deprecated public double getPct(Object v) { return getPct((Comparable<?>) v); } /**']
['D4j_id: Math-105', 'CodRep_id: Dataset3-2312', 'D4j_bug: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return sumYY - sumXY * sumXY / sumXX; } /**', 'D4j_fix: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return Math.max(0d, sumYY - sumXY * sumXY / sumXX); } /**']
['D4j_id: Math-61', 'CodRep_id: Dataset3-2620', 'D4j_bug: */ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) { if (p <= 0) { throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p); } mean = p; normal = new NormalDistributionImpl(p, FastMath.sqrt(p));', 'D4j_fix: */ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) { if (p <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p); } mean = p; normal = new NormalDistributionImpl(p, FastMath.sqrt(p));']
['D4j_id: Lang-59', 'CodRep_id: Dataset3-2932', 'D4j_bug: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);', 'D4j_fix: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-2932', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-2932', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Math-6', 'CodRep_id: Dataset3-3002', 'D4j_bug: this.checker = checker; evaluations = new Incrementor(0, new MaxEvalCallback()); iterations = new Incrementor(0, new MaxIterCallback()); } /**', 'D4j_fix: this.checker = checker; evaluations = new Incrementor(0, new MaxEvalCallback()); iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback()); } /**']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-3140', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Math-59', 'CodRep_id: Dataset3-3200', 'D4j_bug: * @return b if a is lesser or equal to b, a otherwise */ public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b); } /** Compute the maximum of two values', 'D4j_fix: * @return b if a is lesser or equal to b, a otherwise */ public static float max(final float a, final float b) { return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a); } /** Compute the maximum of two values']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-3379', 'D4j_bug: if (!containsKey(key)) { keysAsListed.add(key); } put(key, value); } /**', 'D4j_fix: if (!containsKey(key)) { keysAsListed.add(key); } super.put(key, value); } /**']
['D4j_id: Csv-4', 'CodRep_id: Dataset3-3398', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-4390', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-4432', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-4433', 'D4j_bug: } // single character is itself if (txt.length() == 1) { return txt.toUpperCase() ; } char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;', 'D4j_fix: } // single character is itself if (txt.length() == 1) { return txt.toUpperCase(java.util.Locale.ENGLISH) ; } char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;']
['D4j_id: Math-68', 'CodRep_id: Dataset3-4724', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Math-72', 'CodRep_id: Dataset3-4816', 'D4j_bug: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }', 'D4j_fix: // return the first endpoint if it is good enough double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); return result; }']
['D4j_id: Math-77', 'CodRep_id: Dataset3-4868', 'D4j_bug: public double getLInfNorm() { double max = 0; for (double a : data) { max += Math.max(max, Math.abs(a)); } return max; }', 'D4j_fix: public double getLInfNorm() { double max = 0; for (double a : data) { max = Math.max(max, Math.abs(a)); } return max; }']
['D4j_id: Math-98', 'CodRep_id: Dataset3-4869', 'D4j_bug: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {', 'D4j_fix: } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) {']
['D4j_id: Math-65', 'CodRep_id: Dataset3-4907', 'D4j_bug: * @return RMS value */ public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows); } /**', 'D4j_fix: * @return RMS value */ public double getRMS() { return Math.sqrt(getChiSquare() / rows); } /**']
['D4j_id: Math-68', 'CodRep_id: Dataset3-4909', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Math-75', 'CodRep_id: Dataset3-4916', 'D4j_bug: */ @Deprecated public double getPct(Object v) { return getCumPct((Comparable<?>) v); } /**', 'D4j_fix: */ @Deprecated public double getPct(Object v) { return getPct((Comparable<?>) v); } /**']
['D4j_id: Math-69', 'CodRep_id: Dataset3-4919', 'D4j_bug: } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } }', 'D4j_fix: } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * tDistribution.cumulativeProbability(-t); } } }']
['D4j_id: Math-105', 'CodRep_id: Dataset3-4935', 'D4j_bug: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return sumYY - sumXY * sumXY / sumXX; } /**', 'D4j_fix: * @return sum of squared errors associated with the regression model */ public double getSumSquaredErrors() { return Math.max(0d, sumYY - sumXY * sumXY / sumXX); } /**']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-5156', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Compress-4', 'CodRep_id: Dataset3-5158', 'D4j_bug: results.addedFromChangeSet(change.getEntry().getName()); } } return results; }', 'D4j_fix: results.addedFromChangeSet(change.getEntry().getName()); } } out.finish(); return results; }']
['D4j_id: Lang-41', 'CodRep_id: Dataset3-5222', 'D4j_bug: if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } return out; } // Package name', 'D4j_fix: if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } return out + arrayPrefix; } // Package name']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-5224', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Math-22', 'CodRep_id: Dataset3-5359', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return true; } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return false; } /** {@inheritDoc} */']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-5651', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-6', 'CodRep_id: Dataset3-5654', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-5656', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-5656', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-5657', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-5657', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Collections-2', 'CodRep_id: Dataset3-5875', 'D4j_bug: * This is the name of the property that can point to other * properties file for including other properties files. */ /** * This is the default name of the property that can point to other', 'D4j_fix: * This is the name of the property that can point to other * properties file for including other properties files. */ private String includePropertyName = null; /** * This is the default name of the property that can point to other']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-5875', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Math-22', 'CodRep_id: Dataset3-6110', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return true; } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportLowerBoundInclusive() { return false; } /** {@inheritDoc} */']
['D4j_id: Lang-33', 'CodRep_id: Dataset3-6361', 'D4j_bug: } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i].getClass(); } return classes; }', 'D4j_fix: } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { classes[i] = array[i] == null ? null : array[i].getClass(); } return classes; }']
['D4j_id: Lang-41', 'CodRep_id: Dataset3-6361', 'D4j_bug: * @return the package name or an empty string */ public static String getPackageName(String className) { if (className == null) { return StringUtils.EMPTY; } // Strip array encoding // Strip Object type encoding int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {', "D4j_fix: * @return the package name or an empty string */ public static String getPackageName(String className) { if (className == null || className.length() == 0) { return StringUtils.EMPTY; } // Strip array encoding while (className.charAt(0) == '[') { className = className.substring(1); } // Strip Object type encoding if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { className = className.substring(1); } int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); if (i == -1) {"]
['D4j_id: Lang-35', 'CodRep_id: Dataset3-6879', 'D4j_bug: } else if (element != null) { type = element.getClass(); } else { type = Object.class; } @SuppressWarnings("unchecked") // type must be T T[] newArray = (T[]) copyArrayGrow1(array, type);', 'D4j_fix: } else if (element != null) { type = element.getClass(); } else { throw new IllegalArgumentException("Arguments cannot both be null"); } @SuppressWarnings("unchecked") // type must be T T[] newArray = (T[]) copyArrayGrow1(array, type);']
['D4j_id: Lang-24', 'CodRep_id: Dataset3-7135', "D4j_bug: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp; } // last character is illegal return false;", "D4j_fix: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;"]
['D4j_id: Lang-36', 'CodRep_id: Dataset3-7135', 'D4j_bug: } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {', "D4j_fix: } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {"]
['D4j_id: Lang-38', 'CodRep_id: Dataset3-7460', 'D4j_bug: */ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }', 'D4j_fix: */ public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { calendar.getTime(); /// LANG-538 calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); }']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-7627', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Codec-6', 'CodRep_id: Dataset3-7630', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-7632', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-7632', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-7633', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-7633', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-7932', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Csv-4', 'CodRep_id: Dataset3-8399', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Lang-23', 'CodRep_id: Dataset3-8720', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-8720', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Math-70', 'CodRep_id: Dataset3-8885', 'D4j_bug: /** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(min, max); } /** {@inheritDoc} */', 'D4j_fix: /** {@inheritDoc} */ public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { return solve(f, min, max); } /** {@inheritDoc} */']
['D4j_id: Math-78', 'CodRep_id: Dataset3-8899', 'D4j_bug: if (g0Positive ^ (gb >= 0)) { // there is a sign change: an event is expected during this step // this is a corner case: // - there was an event near ta, // - there is another event between ta and tb', 'D4j_fix: if (g0Positive ^ (gb >= 0)) { // there is a sign change: an event is expected during this step if (ga * gb > 0) { // this is a corner case: // - there was an event near ta, // - there is another event between ta and tb']
['D4j_id: Math-64', 'CodRep_id: Dataset3-8921', 'D4j_bug: double[] diag = new double[cols]; double[] oldX = new double[cols]; double[] oldRes = new double[rows]; double[] work1 = new double[cols]; double[] work2 = new double[cols]; double[] work3 = new double[cols];', 'D4j_fix: double[] diag = new double[cols]; double[] oldX = new double[cols]; double[] oldRes = new double[rows]; double[] oldObj = new double[rows]; double[] qtf = new double[rows]; double[] work1 = new double[cols]; double[] work2 = new double[cols]; double[] work3 = new double[cols];']
['D4j_id: Math-62', 'CodRep_id: Dataset3-8928', 'D4j_bug: final GoalType goal, final double min, final double max) throws FunctionEvaluationException { return optimize(f, goal, min, max, 0); } /** {@inheritDoc} */', 'D4j_fix: final GoalType goal, final double min, final double max) throws FunctionEvaluationException { return optimize(f, goal, min, max, min + 0.5 * (max - min)); } /** {@inheritDoc} */']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9392', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Math-100', 'CodRep_id: Dataset3-9704', 'D4j_bug: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {', 'D4j_fix: // compute transpose(J).J, avoiding building big intermediate matrices final int rows = problem.getMeasurements().length; final int cols = problem.getUnboundParameters().length; final int max = cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {']
['D4j_id: Math-10', 'CodRep_id: Dataset3-9744', 'D4j_bug: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly }', 'D4j_fix: } // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]); }']
['D4j_id: Math-32', 'CodRep_id: Dataset3-9749', 'D4j_bug: if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if ((Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);', 'D4j_fix: if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); if (tree.getCut() == null && (Boolean) tree.getAttribute()) { // the instance covers the whole space setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN);']
['D4j_id: Math-33', 'CodRep_id: Dataset3-9752', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-33', 'CodRep_id: Dataset3-9753', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9804', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Lang-35', 'CodRep_id: Dataset3-9906', 'D4j_bug: } else if (element != null) { clss = element.getClass(); } else { return (T[]) new Object[] { null }; } @SuppressWarnings("unchecked") // the add method creates an array of type clss, which is type T final T[] newArray = (T[]) add(array, index, element, clss);', 'D4j_fix: } else if (element != null) { clss = element.getClass(); } else { throw new IllegalArgumentException("Array and element cannot both be null"); } @SuppressWarnings("unchecked") // the add method creates an array of type clss, which is type T final T[] newArray = (T[]) add(array, index, element, clss);']
['D4j_id: Compress-14', 'CodRep_id: Dataset3-9979', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
['D4j_id: Codec-6', 'CodRep_id: Dataset3-9999', 'D4j_bug: } else if (len == 0) { return 0; } else { /* Rationale for while-loop on (readLen == 0): -----', 'D4j_fix: } else if (len == 0) { return 0; } else { int readLen = 0; /* Rationale for while-loop on (readLen == 0): -----']
['D4j_id: Lang-20', 'CodRep_id: Dataset3-10060', 'D4j_bug: return EMPTY; } StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {', 'D4j_fix: return EMPTY; } StringBuilder buf = new StringBuilder(noOfItems * 16); for (int i = startIndex; i < endIndex; i++) { if (i > startIndex) {']
['D4j_id: Codec-4', 'CodRep_id: Dataset3-10227', 'D4j_bug: * </p> */ public Base64() { this(false); } /**', 'D4j_fix: * </p> */ public Base64() { this(0); } /**']
['D4j_id: Math-82', 'CodRep_id: Dataset3-10330', 'D4j_bug: for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio;', 'D4j_fix: for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); if (MathUtils.compareTo(entry, 0, epsilon) > 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio;']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-10525', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-32', 'CodRep_id: Dataset3-10763', 'D4j_bug: * * @since 2.3 */ private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() { @Override protected Set<IDKey> initialValue() { return new HashSet<IDKey>(); } }; /* * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()', 'D4j_fix: * * @since 2.3 */ private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>(); /* * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()']
['D4j_id: Math-68', 'CodRep_id: Dataset3-10810', 'D4j_bug: setMaxIterations(1000); // default values for the tuning parameters setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);', 'D4j_fix: setMaxIterations(1000); // default values for the tuning parameters setConvergenceChecker(null); setInitialStepBoundFactor(100.0); setCostRelativeTolerance(1.0e-10); setParRelativeTolerance(1.0e-10);']
['D4j_id: Lang-57', 'CodRep_id: Dataset3-11264', 'D4j_bug: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return cAvailableLocaleSet.contains(locale); } //-----------------------------------------------------------------------', 'D4j_fix: * @return true if the locale is a known locale */ public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } //-----------------------------------------------------------------------']
['D4j_id: Lang-59', 'CodRep_id: Dataset3-11411', 'D4j_bug: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, strLen, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);', 'D4j_fix: String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { str.getChars(0, width, buffer, size); } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size);']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-11411', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-11411', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Lang-23', 'CodRep_id: Dataset3-11638', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-11638', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Collections-3', 'CodRep_id: Dataset3-12629', 'D4j_bug: * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken) */ public static Collection removeAll(Collection collection, Collection remove) { return ListUtils.retainAll(collection, remove); } //-----------------------------------------------------------------------', 'D4j_fix: * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken) */ public static Collection removeAll(Collection collection, Collection remove) { return ListUtils.removeAll(collection, remove); } //-----------------------------------------------------------------------']
['D4j_id: Lang-8', 'CodRep_id: Dataset3-12666', 'D4j_bug: private static class TimeZoneNameRule implements Rule { private final Locale mLocale; private final int mStyle; private final TimeZone zone; private final String mStandard; private final String mDaylight;', 'D4j_fix: private static class TimeZoneNameRule implements Rule { private final Locale mLocale; private final int mStyle; private final String mStandard; private final String mDaylight;']
['D4j_id: Collections-2', 'CodRep_id: Dataset3-12672', 'D4j_bug: * This is the name of the property that can point to other * properties file for including other properties files. */ /** * This is the default name of the property that can point to other', 'D4j_fix: * This is the name of the property that can point to other * properties file for including other properties files. */ private String includePropertyName = null; /** * This is the default name of the property that can point to other']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-12672', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Lang-24', 'CodRep_id: Dataset3-12678', "D4j_bug: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp; } // last character is illegal return false;", "D4j_fix: if (chars[i] == 'l' || chars[i] == 'L') { // not allowing L with an exponent or decimal point return foundDigit && !hasExp && !hasDecPoint; } // last character is illegal return false;"]
['D4j_id: Lang-36', 'CodRep_id: Dataset3-12678', 'D4j_bug: } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {', "D4j_fix: } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else {"]
['D4j_id: Lang-23', 'CodRep_id: Dataset3-12725', 'D4j_bug: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";', 'D4j_fix: */ public class ExtendedMessageFormat extends MessageFormat { private static final long serialVersionUID = -2362048321261811743L; private static final int HASH_SEED = 31; private static final String DUMMY_PATTERN = ""; private static final String ESCAPED_QUOTE = "\'\'";']
['D4j_id: Lang-43', 'CodRep_id: Dataset3-12725', 'D4j_bug: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;', 'D4j_fix: int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { next(pos); return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start;']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-12818', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Math-22', 'CodRep_id: Dataset3-13108', 'D4j_bug: /** {@inheritDoc} */ public boolean isSupportUpperBoundInclusive() { return false; } /**', 'D4j_fix: /** {@inheritDoc} */ public boolean isSupportUpperBoundInclusive() { return true; } /**']
['D4j_id: Compress-10', 'CodRep_id: Dataset3-13253', 'D4j_bug: // the hashcode - see COMPRESS-164 // Map needs to be reconstructed in order to keep central // directory order for (ZipArchiveEntry ze : entries.keySet()) { OffsetEntry offsetEntry = entries.get(ze); long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT];', 'D4j_fix: // the hashcode - see COMPRESS-164 // Map needs to be reconstructed in order to keep central // directory order Map<ZipArchiveEntry, OffsetEntry> origMap = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries); entries.clear(); for (ZipArchiveEntry ze : origMap.keySet()) { OffsetEntry offsetEntry = origMap.get(ze); long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT];']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-13927', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-13927', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Codec-1', 'CodRep_id: Dataset3-13928', 'D4j_bug: } // 1. Convert to lowercase txt = txt.toLowerCase(); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");', 'D4j_fix: } // 1. Convert to lowercase txt = txt.toLowerCase(java.util.Locale.ENGLISH); // 2. Remove anything not A-Z txt = txt.replaceAll("[^a-z]", "");']
['D4j_id: Codec-10', 'CodRep_id: Dataset3-13928', 'D4j_bug: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("^mb", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");', 'D4j_fix: txt = txt.replaceAll("^gn", "2n"); // End txt = txt.replaceAll("mb$", "m2"); // 4. Handle replacements txt = txt.replaceAll("cq", "2q");']
['D4j_id: Lang-21', 'CodRep_id: Dataset3-13981', 'D4j_bug: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&', 'D4j_fix: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&']
['D4j_id: Compress-4', 'CodRep_id: Dataset3-14052', 'D4j_bug: results.addedFromChangeSet(change.getEntry().getName()); } } return results; }', 'D4j_fix: results.addedFromChangeSet(change.getEntry().getName()); } } out.finish(); return results; }']
['D4j_id: Compress-20', 'CodRep_id: Dataset3-14264', 'D4j_bug: ret.setInode(readAsciiLong(8, 16)); long mode = readAsciiLong(8, 16); if (mode != 0){ ret.setMode(mode); } ret.setUID(readAsciiLong(8, 16));', 'D4j_fix: ret.setInode(readAsciiLong(8, 16)); long mode = readAsciiLong(8, 16); if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0 ret.setMode(mode); } ret.setUID(readAsciiLong(8, 16));']
['D4j_id: Lang-60', 'CodRep_id: Dataset3-14540', 'D4j_bug: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < thisBuf.length; i++) { if (thisBuf[i] == ch) { return true; }', 'D4j_fix: */ public boolean contains(char ch) { char[] thisBuf = buffer; for (int i = 0; i < this.size; i++) { if (thisBuf[i] == ch) { return true; }']
['D4j_id: Lang-61', 'CodRep_id: Dataset3-14540', 'D4j_bug: return -1; } char[] thisBuf = buffer; int len = thisBuf.length - strLen; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {', 'D4j_fix: return -1; } char[] thisBuf = buffer; int len = size - strLen + 1; outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) {']
['D4j_id: Compress-1', 'CodRep_id: Dataset3-14630', 'D4j_bug: */ public void close() throws IOException { if (!this.closed) { super.close(); this.closed = true; }', 'D4j_fix: */ public void close() throws IOException { if (!this.closed) { this.finish(); super.close(); this.closed = true; }']
['D4j_id: Lang-21', 'CodRep_id: Dataset3-14673', 'D4j_bug: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&', 'D4j_fix: return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&']
['D4j_id: Math-6', 'CodRep_id: Dataset3-14713', 'D4j_bug: // Outer loop. lmPar = 0; boolean firstIteration = true; int iter = 0; final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker(); while (true) { ++iter; final PointVectorValuePair previous = current; // QR decomposition of the jacobian matrix', 'D4j_fix: // Outer loop. lmPar = 0; boolean firstIteration = true; final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker(); while (true) { incrementIterationCount(); final PointVectorValuePair previous = current; // QR decomposition of the jacobian matrix']
['D4j_id: Compress-1', 'CodRep_id: Dataset3-14905', 'D4j_bug: */ public void close() throws IOException { if (!this.closed) { super.close(); this.closed = true; }', 'D4j_fix: */ public void close() throws IOException { if (!this.closed) { this.finish(); super.close(); this.closed = true; }']
['D4j_id: Math-33', 'CodRep_id: Dataset3-14930', 'D4j_bug: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }', 'D4j_fix: // positive cost non-artificial variables for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) > 0) { columnsToDrop.add(i); } }']
['D4j_id: Math-38', 'CodRep_id: Dataset3-14931', 'D4j_bug: final int tmp2 = jpt; jpt = ipt - n; ipt = tmp2; throw new PathIsExploredException(); // XXX } final int iptMinus1 = ipt; final int jptMinus1 = jpt; interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1)); interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1)); }', 'D4j_fix: final int tmp2 = jpt; jpt = ipt - n; ipt = tmp2; // throw new PathIsExploredException(); // XXX } final int iptMinus1 = ipt - 1; final int jptMinus1 = jpt - 1; interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1)); interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1)); }']
['D4j_id: Math-23', 'CodRep_id: Dataset3-14935', 'D4j_bug: UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Best point encountered so far (which is the initial guess). int iter = 0; while (true) {', 'D4j_fix: UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Best point encountered so far (which is the initial guess). UnivariatePointValuePair best = current; int iter = 0; while (true) {']
['D4j_id: Math-96', 'CodRep_id: Dataset3-14961', 'D4j_bug: if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { // ignore exception', 'D4j_fix: if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (real == rhs.real) && (imaginary == rhs.imaginary); } } catch (ClassCastException ex) { // ignore exception']
['D4j_id: Compress-6', 'CodRep_id: Dataset3-15020', 'D4j_bug: */ public ZipArchiveEntry(String name) { super(name); } /**', 'D4j_fix: */ public ZipArchiveEntry(String name) { super(name); setName(name); } /**']
['D4j_id: Collections-2', 'CodRep_id: Dataset3-15069', 'D4j_bug: } try { while (true) { String line = reader.readProperty(); if (line == null) {', 'D4j_fix: } try { String includeProperty = getInclude(); while (true) { String line = reader.readProperty(); if (line == null) {']
['D4j_id: Collections-7', 'CodRep_id: Dataset3-15069', "D4j_bug: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = this.get(key); if (obj == null) { // if there isn't a value there, get it from the", "D4j_fix: */ public Object getProperty(String key) { // first, try to get from the 'user value' store Object obj = super.get(key); if (obj == null) { // if there isn't a value there, get it from the"]
['D4j_id: Csv-4', 'CodRep_id: Dataset3-15155', 'D4j_bug: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return new LinkedHashMap<String, Integer>(this.headerMap); } /**', 'D4j_fix: * @return a copy of the header map that iterates in column order. */ public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } /**']
['D4j_id: Csv-7', 'CodRep_id: Dataset3-15155', 'D4j_bug: import java.net.URL; import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap;', 'D4j_fix: import java.net.URL; import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap;']
['D4j_id: Compress-3', 'CodRep_id: Dataset3-15274', 'D4j_bug: + "\' before the \'" + currSize + "\' bytes specified in the header were written"); } } /**', 'D4j_fix: + "\' before the \'" + currSize + "\' bytes specified in the header were written"); } haveUnclosedEntry = false; } /**']
['D4j_id: Compress-14', 'CodRep_id: Dataset5-16738', 'D4j_bug: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }', 'D4j_fix: throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }']
